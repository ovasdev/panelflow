# test_imports.py
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ PanelFlow."""


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É."""

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ PanelFlow...\n")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ Python –∏–º–ø–æ—Ä—Ç—ã
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        from typing import Any, Dict, Type, Callable
        import json
        from pathlib import Path
        print("   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            import jsonschema
            print("   ‚úÖ jsonschema")
        except ImportError:
            print("   ‚ùå jsonschema - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install jsonschema")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É panelflow
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã panelflow...")

        try:
            import panelflow
            print("   ‚úÖ panelflow (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç)")
        except ImportError as e:
            print(f"   ‚ùå panelflow - {e}")
            print("      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ __init__.py —Ñ–∞–π–ª—ã")
            return False

        try:
            import panelflow.core
            print("   ‚úÖ panelflow.core")
        except ImportError as e:
            print(f"   ‚ùå panelflow.core - {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —è–¥—Ä–∞...")

        try:
            from panelflow.core import events
            print("   ‚úÖ events")
        except ImportError as e:
            print(f"   ‚ùå events - {e}")
            return False

        try:
            from panelflow.core import components
            print("   ‚úÖ components")
        except ImportError as e:
            print(f"   ‚ùå components - {e}")
            return False

        try:
            from panelflow.core import state
            print("   ‚úÖ state")
        except ImportError as e:
            print(f"   ‚ùå state - {e}")
            return False

        try:
            from panelflow.core import handlers
            print("   ‚úÖ handlers")
        except ImportError as e:
            print(f"   ‚ùå handlers - {e}")
            return False

        try:
            from panelflow.core import application
            print("   ‚úÖ application")
        except ImportError as e:
            print(f"   ‚ùå application - {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")

        try:
            from panelflow.core import Application
            print("   ‚úÖ Application")
        except ImportError as e:
            print(f"   ‚ùå Application - {e}")
            return False

        try:
            from panelflow.core.handlers import BasePanelHandler
            print("   ‚úÖ BasePanelHandler")
        except ImportError as e:
            print(f"   ‚ùå BasePanelHandler - {e}")
            return False

        try:
            from panelflow.core.events import (
                WidgetSubmittedEvent,
                StateChangedEvent,
                ErrorOccurredEvent,
                HorizontalNavigationEvent,
                VerticalNavigationEvent,
                BackNavigationEvent
            )
            print("   ‚úÖ –°–æ–±—ã—Ç–∏—è")
        except ImportError as e:
            print(f"   ‚ùå –°–æ–±—ã—Ç–∏—è - {e}")
            return False

        try:
            from panelflow.core.components import (
                AbstractPanel,
                AbstractWidget,
                AbstractButton,
                AbstractTextInput,
                PanelLink
            )
            print("   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        except ImportError as e:
            print(f"   ‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - {e}")
            return False

        try:
            from panelflow.core.state import TreeNode
            print("   ‚úÖ TreeNode")
        except ImportError as e:
            print(f"   ‚ùå TreeNode - {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            class TestHandler(BasePanelHandler):
                def on_widget_update(self, widget_id: str, value: Any) -> tuple | None:
                    return None

            print("   ‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç BasePanelHandler")
        except Exception as e:
            print(f"   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - {e}")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–∞–Ω–µ–ª—å
            panel = AbstractPanel(
                id="test",
                title="Test Panel"
            )
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ AbstractPanel")
        except Exception as e:
            print(f"   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ - {e}")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = WidgetSubmittedEvent(widget_id="test", value="test")
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
        except Exception as e:
            print(f"   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - {e}")
            return False

        print("\nüéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã.")
        return True

    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def diagnose_environment():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    print("\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")

    import sys
    import os

    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"Python path: {sys.path[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—É—Ç–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    files_to_check = [
        "panelflow/__init__.py",
        "panelflow/core/__init__.py",
        "panelflow/core/application.py",
        "panelflow/core/components.py",
        "panelflow/core/state.py",
        "panelflow/core/handlers.py",
        "panelflow/core/events.py"
    ]

    for file_path in files_to_check:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")


if __name__ == "__main__":
    diagnose_environment()
    success = test_imports()

    if success:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python simple_test.py")
    else:
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã PanelFlow —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install jsonschema")
        print("4. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")