# check_methods.py
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã Application —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""


def check_application_methods():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤."""

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ Application...\n")

    try:
        from panelflow.core import Application
        print("‚úÖ Application –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Application: {e}")
        return False

    # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    required_methods = [
        # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        'post_event',
        'subscribe_to_events',
        'unsubscribe_from_events',

        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        '_handle_widget_submission',
        '_handle_horizontal_navigation',
        '_handle_vertical_navigation',
        '_handle_back_navigation',
        '_execute_navigation_down',

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        '_find_node_by_widget_id',
        '_get_path_to_active_node',
        '_destroy_stack_recursively',
        '_publish_event',
        '_set_active_node',
        '_create_panel_instance',

        # –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        '_load_config',
        '_validate_json_schema',
        '_parse_config_to_objects',
        '_validate_config_integrity',
        '_create_initial_state'
    ]

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤:")
    missing_methods = []

    for method_name in required_methods:
        if hasattr(Application, method_name):
            print(f"   ‚úÖ {method_name}")
        else:
            print(f"   ‚ùå {method_name} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_methods.append(method_name)

    if missing_methods:
        print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´: {len(missing_methods)}")
        for method in missing_methods:
            print(f"   - {method}")
        return False

    print(f"\n‚úÖ –í—Å–µ {len(required_methods)} –º–µ—Ç–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω—ã!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤:")
    required_properties = ['tree_root', 'active_node']

    for prop_name in required_properties:
        if hasattr(Application, prop_name):
            print(f"   ‚úÖ {prop_name}")
        else:
            print(f"   ‚ùå {prop_name} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")

    return len(missing_methods) == 0


def check_method_signatures():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤."""

    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤...")

    try:
        from panelflow.core import Application
        import inspect

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º post_event
        post_event_sig = inspect.signature(Application.post_event)
        print(f"   post_event{post_event_sig}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º _handle_widget_submission
        if hasattr(Application, '_handle_widget_submission'):
            handle_sig = inspect.signature(Application._handle_widget_submission)
            print(f"   _handle_widget_submission{handle_sig}")

        print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä—ã –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä: {e}")
        return False

    return True


def quick_instantiation_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application."""

    print(f"\nüèóÔ∏è –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Application...")

    import tempfile
    import json
    from pathlib import Path

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "entryPanel": "test",
        "panels": [
            {
                "id": "test",
                "title": "Test Panel",
                "widgets": []
            }
        ]
    }

    temp_file = tempfile.NamedTemporaryFile(
        mode='w', suffix='.json', delete=False, encoding='utf-8'
    )
    json.dump(config, temp_file, ensure_ascii=False, indent=2)
    temp_file.close()

    try:
        from panelflow.core import Application
        app = Application(temp_file.name, {})

        print("‚úÖ Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: {app.active_node.panel_template.id if app.active_node else 'None'}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Application: {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        Path(temp_file.name).unlink()


if __name__ == "__main__":
    print("üî¨ === –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò APPLICATION ===\n")

    step1 = check_application_methods()
    step2 = check_method_signatures()
    step3 = quick_instantiation_test()

    if step1 and step2 and step3:
        print(f"\nüéâ Application —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å minimal_test.py")
    else:
        print(f"\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ Application:")
        if not step1:
            print(f"   - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã")
        if not step2:
            print(f"   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤")
        if not step3:
            print(f"   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ")

        print(f"\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–µ—Å—å –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ application.py")