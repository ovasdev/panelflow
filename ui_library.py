#!/usr/bin/env python3
"""
UI Library for Panel-based Console Applications
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
"""

import curses
import math
from typing import List, Dict, Optional, Callable, Any
from enum import Enum
from dataclasses import dataclass


class PanelType(Enum):
    DIRECTORY = "directory"
    FILE = "file"
    BINARY = "binary"
    ARCHIVE = "archive"


@dataclass
class PanelState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
    title: str
    content: List[str]
    selected_index: int = 0
    scroll_offset: int = 0
    panel_type: PanelType = PanelType.DIRECTORY
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


class Panel:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª—å—é"""

    def __init__(self, x: int, y: int, width: int, height: int, state: PanelState):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.state = state
        self.window = None

    def create_window(self, stdscr):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–∞–Ω–µ–ª–∏"""
        self.window = curses.newwin(self.height, self.width, self.y, self.x)
        self.window.keypad(True)

    def draw(self, is_active: bool = False):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏"""
        if not self.window:
            return

        self.window.clear()  # –í–µ—Ä–Ω—É–ª clear –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏

        # –†–∞–º–∫–∞ –ø–∞–Ω–µ–ª–∏
        border_attr = curses.A_BOLD if is_active else curses.A_NORMAL
        try:
            self.window.box()
        except curses.error:
            pass

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        title = self.state.title[:self.width - 4] if len(self.state.title) > self.width - 4 else self.state.title
        title_x = max(1, (self.width - len(title)) // 2)
        try:
            self.window.addstr(0, title_x, title, border_attr)
        except curses.error:
            pass

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏
        content_height = self.height - 2
        if content_height <= 0:
            self.window.refresh()
            return

        visible_content = self.state.content[
                          self.state.scroll_offset:self.state.scroll_offset + content_height
                          ]

        for i, line in enumerate(visible_content):
            if i >= content_height:
                break

            y_pos = i + 1
            if y_pos >= self.height - 1:
                break

            # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —à–∏—Ä–∏–Ω–µ
            display_line = line[:self.width - 2] if len(line) > self.width - 2 else line

            # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            attr = curses.A_NORMAL
            if (i + self.state.scroll_offset) == self.state.selected_index:
                attr = curses.A_REVERSE if is_active else curses.A_UNDERLINE

            # –ü—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            if curses.has_colors():
                try:
                    if self.state.panel_type == PanelType.DIRECTORY:
                        if line.startswith('üìÅ') or 'DIR' in line:
                            attr |= curses.color_pair(1)  # –°–∏–Ω–∏–π –¥–ª—è –ø–∞–ø–æ–∫
                        elif line.startswith('üìÑ'):
                            attr |= curses.color_pair(2)  # –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
                        elif line.startswith('üì¶'):
                            attr |= curses.color_pair(3)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤
                except:
                    pass

            try:
                self.window.addstr(y_pos, 1, display_line, attr)
            except curses.error:
                pass

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
        if len(self.state.content) > content_height and content_height > 0:
            try:
                scrollbar_pos = int(self.state.scroll_offset * content_height / len(self.state.content))
                self.window.addstr(scrollbar_pos + 1, self.width - 1, '‚ñà')
            except (curses.error, ZeroDivisionError):
                pass

        self.window.refresh()

    def _draw_scrollbar(self, content_height: int):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞"""
        total_items = len(self.state.content)
        if total_items <= content_height:
            return

        scrollbar_height = max(1, content_height * content_height // total_items)
        scrollbar_pos = self.state.scroll_offset * content_height // total_items

        for i in range(content_height):
            char = '‚îÇ'
            if scrollbar_pos <= i < scrollbar_pos + scrollbar_height:
                char = '‚ñà'
            try:
                self.window.addstr(i + 1, self.width - 1, char)
            except curses.error:
                pass

    def move_selection(self, delta: int):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        old_index = self.state.selected_index
        self.state.selected_index = max(0, min(len(self.state.content) - 1,
                                               self.state.selected_index + delta))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        content_height = self.height - 2
        if self.state.selected_index < self.state.scroll_offset:
            self.state.scroll_offset = self.state.selected_index
        elif self.state.selected_index >= self.state.scroll_offset + content_height:
            self.state.scroll_offset = self.state.selected_index - content_height + 1

        return old_index != self.state.selected_index

    def get_selected_item(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if 0 <= self.state.selected_index < len(self.state.content):
            return self.state.content[self.state.selected_index]
        return None


class StatusBar:
    """–°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"""

    def __init__(self, y: int, width: int):
        self.y = y
        self.width = width
        self.window = None

    def create_window(self, stdscr):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.window = curses.newwin(1, self.width, self.y, 0)

    def draw(self, left_panels: int, current_title: str, right_panels: int,
             extra_info: str = ""):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if not self.window:
            return

        self.window.clear()

        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if current_title:
            status_text = f"[{left_panels}] {current_title} [{right_panels}]"
            if extra_info:
                status_text += f" - {extra_info}"
        else:
            status_text = "File Manager"

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        if len(status_text) > self.width:
            status_text = status_text[:self.width - 3] + "..."

        try:
            self.window.addstr(0, 0, status_text, curses.A_REVERSE)
        except curses.error:
            pass

        self.window.refresh()


class CommandLine:
    """–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"""

    def __init__(self, y: int, width: int):
        self.y = y
        self.width = width
        self.window = None
        self.prompt = "Command: "
        self.text = ""
        self.cursor_pos = 0

    def create_window(self, stdscr):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.window = curses.newwin(1, self.width, self.y, 0)

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if not self.window:
            return

        self.window.clear()

        display_text = self.prompt + self.text
        if len(display_text) > self.width:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            start_pos = max(0, len(display_text) - self.width + 1)
            display_text = display_text[start_pos:]

        try:
            self.window.addstr(0, 0, display_text)
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä
            cursor_x = min(len(self.prompt) + self.cursor_pos, self.width - 1)
            self.window.move(0, cursor_x)
        except curses.error:
            pass

        self.window.refresh()

    def handle_key(self, key: int) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if key == curses.KEY_BACKSPACE or key == 127 or key == 8:
            if self.cursor_pos > 0:
                self.text = self.text[:self.cursor_pos - 1] + self.text[self.cursor_pos:]
                self.cursor_pos -= 1
        elif key == curses.KEY_DC:  # Delete
            if self.cursor_pos < len(self.text):
                self.text = self.text[:self.cursor_pos] + self.text[self.cursor_pos + 1:]
        elif key == curses.KEY_LEFT:
            self.cursor_pos = max(0, self.cursor_pos - 1)
        elif key == curses.KEY_RIGHT:
            self.cursor_pos = min(len(self.text), self.cursor_pos + 1)
        elif key == curses.KEY_HOME:
            self.cursor_pos = 0
        elif key == curses.KEY_END:
            self.cursor_pos = len(self.text)
        elif key == ord('\n') or key == ord('\r'):
            # Enter - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            command = self.text
            self.clear()
            return command
        elif 32 <= key <= 126:  # –ü–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            self.text = self.text[:self.cursor_pos] + chr(key) + self.text[self.cursor_pos:]
            self.cursor_pos += 1

        return None

    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.text = ""
        self.cursor_pos = 0


class FunctionKeys:
    """–°—Ç—Ä–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""

    def __init__(self, y: int, width: int):
        self.y = y
        self.width = width
        self.window = None
        self.keys = {}

    def create_window(self, stdscr):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""
        self.window = curses.newwin(1, self.width, self.y, 0)

    def set_keys(self, keys: Dict[str, str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""
        self.keys = keys

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""
        if not self.window:
            return

        self.window.clear()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        key_strings = []
        for key, action in self.keys.items():
            key_strings.append(f"{key}:{action}")

        keys_line = " ".join(key_strings)
        if len(keys_line) > self.width:
            keys_line = keys_line[:self.width - 3] + "..."

        try:
            self.window.addstr(0, 0, keys_line, curses.A_REVERSE)
        except curses.error:
            pass

        self.window.refresh()


class PanelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–Ω–µ–ª–µ–π"""

    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.panels: List[Panel] = []
        self.current_panel_index = 0
        self.branches: Dict[str, List[PanelState]] = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        if curses.has_colors():
            curses.start_color()
            try:
                curses.use_default_colors()
                curses.init_pair(1, curses.COLOR_BLUE, curses.COLOR_BLACK)  # –ü–∞–ø–∫–∏
                curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)  # –§–∞–π–ª—ã
                curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)  # –ê—Ä—Ö–∏–≤—ã
                curses.init_pair(4, curses.COLOR_YELLOW, curses.COLOR_BLACK)  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            except:
                # –ï—Å–ª–∏ —Ü–≤–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                pass

        # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        self.height, self.width = stdscr.getmaxyx()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
        self.status_bar = StatusBar(0, self.width)
        self.status_bar.create_window(stdscr)

        self.command_line = CommandLine(self.height - 2, self.width)
        self.command_line.create_window(stdscr)

        self.function_keys = FunctionKeys(self.height - 1, self.width)
        self.function_keys.create_window(stdscr)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_handlers: Dict[str, Callable] = {}

    def add_panel(self, state: PanelState) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
        if self.panels:
            self.panels = self.panels[:self.current_panel_index + 1]

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        panel_count = len(self.panels) + 1
        content_height = self.height - 4  # –°—Ç–∞—Ç—É—Å + –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ + —Ñ—É–Ω–∫—Ü. –∫–ª–∞–≤–∏—à–∏ + –æ—Ç—Å—Ç—É–ø
        content_width = self.width

        if panel_count <= 3:
            panel_width = content_width // 3
            panel_height = content_height
            panel_x = len(self.panels) * panel_width
            panel_y = 1
        else:
            # –î–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –¥–µ–ª–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            panel_width = content_width // 3
            panel_height = content_height
            panel_x = 2 * panel_width  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞–Ω–µ–ª–∏
            panel_y = 1

        panel = Panel(panel_x, panel_y, panel_width, panel_height, state)
        panel.create_window(self.stdscr)

        self.panels.append(panel)
        self.current_panel_index = len(self.panels) - 1

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
        self._recalculate_panel_positions()

        return len(self.panels) - 1

    def remove_panel(self, index: int = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–µ—ë"""
        if index is None:
            index = self.current_panel_index

        if 0 <= index < len(self.panels):
            # –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ —Å–ø—Ä–∞–≤–∞
            self.panels = self.panels[:index]

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            if self.panels:
                self.current_panel_index = len(self.panels) - 1
            else:
                self.current_panel_index = 0

            self._recalculate_panel_positions()

    def _recalculate_panel_positions(self):
        """–ü–µ—Ä–µ—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–π –ø–∞–Ω–µ–ª–µ–π"""
        if not self.panels:
            return

        content_height = self.height - 4
        content_width = self.width

        visible_panels = min(3, len(self.panels))
        panel_width = content_width // 3

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        if len(self.panels) <= 3:
            start_index = 0
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
            start_index = max(0, self.current_panel_index - 2)
            start_index = min(start_index, len(self.panels) - 3)

        for i, panel in enumerate(self.panels):
            display_index = i - start_index
            if 0 <= display_index < 3:
                panel.x = display_index * panel_width
                panel.y = 1
                panel.width = panel_width
                panel.height = content_height

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                if panel.window:
                    del panel.window
                panel.create_window(self.stdscr)

    def switch_panel(self, direction: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏"""
        if not self.panels:
            return

        new_index = self.current_panel_index + direction
        if 0 <= new_index < len(self.panels):
            self.current_panel_index = new_index
            self._recalculate_panel_positions()

    def get_current_panel(self) -> Optional[Panel]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏"""
        if 0 <= self.current_panel_index < len(self.panels):
            return self.panels[self.current_panel_index]
        return None

    def save_branch(self, name: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ –ø–∞–Ω–µ–ª–µ–π"""
        states = [panel.state for panel in self.panels]
        self.branches[name] = states

    def load_branch(self, name: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤–µ—Ç–∫–∏"""
        if name in self.branches:
            self.panels.clear()
            for state in self.branches[name]:
                self.add_panel(state)
            self.current_panel_index = len(self.panels) - 1

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.stdscr.clear()

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–µ–π
        visible_start = 0
        if len(self.panels) > 3:
            visible_start = max(0, self.current_panel_index - 2)
            visible_start = min(visible_start, len(self.panels) - 3)

        for i, panel in enumerate(self.panels):
            display_index = i - visible_start
            if 0 <= display_index < 3:
                is_active = (i == self.current_panel_index)
                panel.draw(is_active)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        current_title = "File Manager"
        extra_info = ""
        if self.panels:
            current_panel = self.get_current_panel()
            if current_panel:
                current_title = current_panel.state.title
                if current_panel.state.metadata:
                    meta = current_panel.state.metadata
                    if 'items' in meta:
                        extra_info = f"{meta.get('items', 0)} items"

        self.status_bar.draw(
            self.current_panel_index,
            current_title,
            max(0, len(self.panels) - self.current_panel_index - 1),
            extra_info
        )

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        self.command_line.draw()
        self.function_keys.draw()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.stdscr.refresh()

    def handle_key(self, key: int) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        command = self.command_line.handle_key(key)
        if command:
            return command

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–Ω–µ–ª—è–º
        current_panel = self.get_current_panel()
        if current_panel:
            if key == curses.KEY_UP:
                current_panel.move_selection(-1)
            elif key == curses.KEY_DOWN:
                current_panel.move_selection(1)
            elif key == curses.KEY_PPAGE:  # Page Up
                current_panel.move_selection(-10)
            elif key == curses.KEY_NPAGE:  # Page Down
                current_panel.move_selection(10)
            elif key == curses.KEY_HOME:
                current_panel.state.selected_index = 0
                current_panel.state.scroll_offset = 0
            elif key == curses.KEY_END:
                current_panel.state.selected_index = len(current_panel.state.content) - 1
                content_height = current_panel.height - 2
                current_panel.state.scroll_offset = max(0, len(current_panel.state.content) - content_height)

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
        if key == ord('\t'):  # Tab
            self.switch_panel(1)
        elif key == curses.KEY_BTAB:  # Shift+Tab
            self.switch_panel(-1)
        elif key == 27:  # Escape
            self.remove_panel()

        return None

    def register_command_handler(self, command: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        self.command_handlers[command] = handler

    def execute_command(self, command: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        parts = command.split()
        if not parts:
            return

        cmd = parts[0]
        args = parts[1:] if len(parts) > 1 else []

        if cmd in self.command_handlers:
            self.command_handlers[cmd](args)