# debug_navigation.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
"""

import tempfile
import json
from pathlib import Path
from typing import Any

from panelflow.core import Application
from panelflow.core.handlers import BasePanelHandler
from panelflow.core.events import WidgetSubmittedEvent, StateChangedEvent, ErrorOccurredEvent


class DebugHandler(BasePanelHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π."""

    def on_widget_update(self, widget_id: str, value: Any) -> tuple | None:
        print(f"\nüîß === –í–´–ó–û–í –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ===")
        print(f"widget_id: {widget_id}")
        print(f"value: {value}")
        print(f"context: {self.context}")
        print(f"form_data: {self.form_data}")

        if widget_id == "goto_child":
            command = ("navigate_down", "child")
            print(f"–í–û–ó–í–†–ê–©–ê–Æ: {command}")
            return command
        else:
            print("–í–û–ó–í–†–ê–©–ê–Æ: None")
            return None


def create_debug_config():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    return {
        "entryPanel": "main",
        "panels": [
            {
                "id": "main",
                "title": "–ì–ª–∞–≤–Ω–∞—è",
                "handler_class_name": "DebugHandler",
                "widgets": [
                    {
                        "id": "goto_child",
                        "type": "button",
                        "title": "–ö –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–Ω–µ–ª–∏"
                    }
                ]
            },
            {
                "id": "child",
                "title": "–î–æ—á–µ—Ä–Ω—è—è",
                "widgets": [
                    {
                        "id": "child_button",
                        "type": "button",
                        "title": "–î–æ—á–µ—Ä–Ω—è—è –∫–Ω–æ–ø–∫–∞"
                    }
                ]
            }
        ]
    }


def debug_application_methods():
    """–û—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–æ–≤ Application."""

    print("üîç === –û–¢–õ–ê–î–ö–ê –ú–ï–¢–û–î–û–í APPLICATION ===\n")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    config = create_debug_config()
    handler_map = {"DebugHandler": DebugHandler}

    temp_file = tempfile.NamedTemporaryFile(
        mode='w', suffix='.json', delete=False, encoding='utf-8'
    )
    json.dump(config, temp_file, ensure_ascii=False, indent=2)
    temp_file.close()

    try:
        app = Application(temp_file.name, handler_map)

        print("1. –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        print(f"   active_node: {app.active_node.panel_template.id}")
        print(f"   is_active: {app.active_node.is_active}")
        print(f"   children_stacks: {app.active_node.children_stacks}")

        # –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–∞
        print(f"\n2. –ü–û–ò–°–ö –í–ò–î–ñ–ï–¢–ê 'goto_child':")
        found_node = app._find_node_by_widget_id("goto_child")
        if found_node:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏: {found_node.panel_template.id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –≤–∏–¥–∂–µ—Ç
            for widget in found_node.panel_template.widgets:
                if widget.id == "goto_child":
                    print(f"   –í–∏–¥–∂–µ—Ç: {widget.type} '{widget.title}'")
                    break
        else:
            print("   ‚ùå –í–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        print(f"\n3. –ü–†–û–í–ï–†–ö–ê –ü–ê–ù–ï–õ–ò 'child':")
        if "child" in app._panel_templates:
            child_panel = app._panel_templates["child"]
            print(f"   ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: '{child_panel.title}'")
        else:
            print("   ‚ùå –ü–∞–Ω–µ–ª—å 'child' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        events = []

        def event_handler(event):
            events.append(event)
            print(f"\nüì¢ –°–û–ë–´–¢–ò–ï: {type(event).__name__}")
            if isinstance(event, ErrorOccurredEvent):
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {event.title} - {event.message}")

        app.subscribe_to_events(event_handler)

        print(f"\n4. –û–¢–ü–†–ê–í–ö–ê –°–û–ë–´–¢–ò–Ø WidgetSubmittedEvent:")
        print(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é: widget_id='goto_child', value=True")

        app.post_event(WidgetSubmittedEvent(widget_id="goto_child", value=True))

        print(f"\n5. –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –°–û–ë–´–¢–ò–Ø:")
        print(f"   active_node: {app.active_node.panel_template.id}")
        print(f"   –°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–æ: {len(events)}")

        if app.active_node.parent:
            print(f"   –†–æ–¥–∏—Ç–µ–ª—å: {app.active_node.parent.panel_template.id}")
            print(f"   –°—Ç–µ–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—è: {list(app.active_node.parent.children_stacks.keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
        for event in events:
            if isinstance(event, ErrorOccurredEvent):
                print(f"\n‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê:")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {event.title}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {event.message}")

        if app.active_node.panel_template.id == "child":
            print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"\n‚ùå –ü–†–û–í–ê–õ! –û–∂–∏–¥–∞–ª–∏ 'child', –ø–æ–ª—É—á–∏–ª–∏ '{app.active_node.panel_template.id}'")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            print(f"   –ú–µ—Ç–æ–¥ _handle_widget_submission —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {hasattr(app, '_handle_widget_submission')}")
            print(f"   –ú–µ—Ç–æ–¥ _execute_navigation_down —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {hasattr(app, '_execute_navigation_down')}")
            print(f"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ handler_map: {'DebugHandler' in app.handler_map}")

    finally:
        Path(temp_file.name).unlink()


if __name__ == "__main__":
    debug_application_methods()