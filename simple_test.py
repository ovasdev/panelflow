# simple_test.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""

import tempfile
import json
from pathlib import Path
from typing import Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã PanelFlow
from panelflow.core import Application
from panelflow.core.handlers import BasePanelHandler
from panelflow.core.events import (
    WidgetSubmittedEvent,
    HorizontalNavigationEvent,
    BackNavigationEvent,
    StateChangedEvent,
    ErrorOccurredEvent
)


class SimpleHandler(BasePanelHandler):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def on_widget_update(self, widget_id: str, value: Any) -> tuple | None:
        print(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω: widget_id={widget_id}, value={value}")

        if widget_id == "goto_child":
            print("‚Üí –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–Ω–µ–ª–∏")
            return ("navigate_down", "child")

        return None


def create_simple_config():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return {
        "entryPanel": "main",
        "panels": [
            {
                "id": "main",
                "title": "–ì–ª–∞–≤–Ω–∞—è",
                "description": "–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
                "handler_class_name": "SimpleHandler",
                "widgets": [
                    {
                        "id": "text_field",
                        "type": "text_input",
                        "title": "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ",
                        "placeholder": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
                    },
                    {
                        "id": "goto_child",
                        "type": "button",
                        "title": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–Ω–µ–ª–∏"
                    }
                ]
            },
            {
                "id": "child",
                "title": "–î–æ—á–µ—Ä–Ω—è—è",
                "description": "–î–æ—á–µ—Ä–Ω—è—è –ø–∞–Ω–µ–ª—å",
                "widgets": [
                    {
                        "id": "child_button",
                        "type": "button",
                        "title": "–ö–Ω–æ–ø–∫–∞ –≤ –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–Ω–µ–ª–∏"
                    }
                ]
            }
        ]
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ PanelFlow\n")

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handler_map = {"SimpleHandler": SimpleHandler}

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = create_simple_config()
    temp_file = tempfile.NamedTemporaryFile(
        mode='w', suffix='.json', delete=False, encoding='utf-8'
    )
    json.dump(config, temp_file, ensure_ascii=False, indent=2)
    temp_file.close()

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = Application(temp_file.name, handler_map)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        events_received = []

        def event_callback(event):
            events_received.append(event)
            print(f"üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {type(event).__name__}")

        app.subscribe_to_events(event_callback)

        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        assert app.tree_root is not None
        assert app.active_node is not None
        assert app.active_node.panel_template.id == "main"
        assert app.active_node.is_active == True
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –¢–µ—Å—Ç 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        print("\n3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è...")
        events_received.clear()
        app.post_event(WidgetSubmittedEvent(widget_id="text_field", value="test data"))

        assert len(events_received) == 1
        assert isinstance(events_received[0], StateChangedEvent)
        assert app.active_node.form_data["text_field"] == "test data"
        print("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç 3: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω–∏–∑
        print("\n4. –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–Ω–µ–ª–∏...")
        events_received.clear()
        app.post_event(WidgetSubmittedEvent(widget_id="goto_child", value=True))

        assert len(events_received) == 1
        assert isinstance(events_received[0], StateChangedEvent)
        assert app.active_node.panel_template.id == "child"
        assert app.active_node.parent.panel_template.id == "main"
        assert "test data" in str(app.active_node.context)  # –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å—Å—è
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç 4: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        print("\n5. –¢–µ—Å—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        events_received.clear()

        # –ò–¥–µ–º –≤–ª–µ–≤–æ (–∫ —Ä–æ–¥–∏—Ç–µ–ª—é)
        app.post_event(HorizontalNavigationEvent(direction="previous"))
        assert app.active_node.panel_template.id == "main"

        # –ò–¥–µ–º –≤–ø—Ä–∞–≤–æ (–∫ –¥–æ—á–µ—Ä–Ω–µ–π)
        app.post_event(HorizontalNavigationEvent(direction="next"))
        assert app.active_node.panel_template.id == "child"

        print("‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç 5: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
        print("\n6. –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥...")
        events_received.clear()
        app.post_event(BackNavigationEvent())

        assert app.active_node.panel_template.id == "main"
        assert len(app.active_node.children_stacks) == 0  # –î–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–µ–∫–∏ –æ—á–∏—â–µ–Ω—ã
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç 6: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–Ω—ã —Å—Ç–µ–∫–∞)
        print("\n7. –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—á–µ—Ä–Ω—é—é –ø–∞–Ω–µ–ª—å
        app.post_event(WidgetSubmittedEvent(widget_id="goto_child", value=True))
        new_child_id = app.active_node.node_id

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        app.post_event(BackNavigationEvent())

        # –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω—É –¥–æ—á–µ—Ä–Ω—é—é –ø–∞–Ω–µ–ª—å
        app.post_event(WidgetSubmittedEvent(widget_id="goto_child", value=True))
        another_child_id = app.active_node.node_id

        # ID –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è (–Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã)
        assert new_child_id != another_child_id
        print("‚úÖ –ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –°–≤–æ–¥–∫–∞
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(events_received)}")
        print(f"üèóÔ∏è  –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        print(f"   –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: {app.tree_root.panel_template.title}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: {app.active_node.panel_template.title}")
        print(f"   –î–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç–µ–∫–æ–≤: {len(app.active_node.parent.children_stacks) if app.active_node.parent else 0}")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_file.name).unlink()


if __name__ == "__main__":
    main()