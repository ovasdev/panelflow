import curses
import threading
import time
import queue


class CursesConnectorApp:
    def __init__(self):
        self.panel1_content = ["–ò–°–¢–û–ß–ù–ò–ö", "–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã", "–°—Ç–∞—Ç—É—Å: –û–ö"]
        self.panel2_content = ["–û–ë–†–ê–ë–û–¢–ö–ê", "–ê–ª–≥–æ—Ä–∏—Ç–º: ML", "–ü—Ä–æ–≥—Ä–µ—Å—Å: 75%"]
        self.panel3_content = ["–†–ï–ó–£–õ–¨–¢–ê–¢", "–í—ã—Ö–æ–¥ –≥–æ—Ç–æ–≤", "–§–æ—Ä–º–∞—Ç: JSON"]
        self.command_queue = queue.Queue()
        self.running = True

    def draw_box(self, win, y, x, height, width, title=""):
        """–†–∏—Å—É–µ–º —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        # –£–≥–ª—ã –∏ –ª–∏–Ω–∏–∏
        win.addch(y, x, '‚îå')
        win.addch(y, x + width - 1, '‚îê')
        win.addch(y + height - 1, x, '‚îî')
        win.addch(y + height - 1, x + width - 1, '‚îò')

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(1, width - 1):
            win.addch(y, x + i, '‚îÄ')
            win.addch(y + height - 1, x + i, '‚îÄ')

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(1, height - 1):
            win.addch(y + i, x, '‚îÇ')
            win.addch(y + i, x + width - 1, '‚îÇ')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            title_x = x + (width - len(title)) // 2
            win.addstr(y, title_x, title)

    def draw_horizontal_connector(self, win, y, x, width, style="arrows"):
        """–†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º—ã—á–∫—É"""
        if style == "arrows":
            win.addch(y, x, '‚óÑ')
            for i in range(1, width - 1):
                win.addch(y, x + i, '‚ïê')
            win.addch(y, x + width - 1, '‚ñ∫')
        elif style == "line":
            for i in range(width):
                win.addch(y, x + i, '‚îÄ')

    def draw_vertical_connector(self, win, y, x, height, style="arrows"):
        """–†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º—ã—á–∫—É"""
        if style == "arrows":
            win.addch(y, x, '‚ñ≤')
            for i in range(1, height - 1):
                win.addch(y + i, x, '‚ïë')
            win.addch(y + height - 1, x, '‚ñº')
        elif style == "line":
            for i in range(height):
                win.addch(y + i, x, '‚îÇ')

    def draw_complex_connector(self, win, y, x):
        """–†–∏—Å—É–µ–º —Å–ª–æ–∂–Ω—É—é –ø–µ—Ä–µ–º—ã—á–∫—É"""
        lines = [
            "    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê",
            "    ‚îÇ  DATA   ‚îÇ",
            "‚óÑ‚îÄ‚îÄ‚îÄ‚î§  FLOW   ‚îú‚îÄ‚îÄ‚îÄ‚ñ∫",
            "    ‚îÇ  NODE   ‚îÇ",
            "    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        ]

        for i, line in enumerate(lines):
            if y + i < curses.LINES - 1 and x + len(line) < curses.COLS:
                win.addstr(y + i, x, line)

    def draw_interface(self, stdscr):
        """–†–∏—Å—É–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        stdscr.clear()

        height, width = stdscr.getmaxyx()

        # –†–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π
        panel_width = width // 4
        panel_height = 8
        start_y = 3

        # –ü–æ–∑–∏—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π
        panel1_x = 2
        panel2_x = panel1_x + panel_width + 6
        panel3_x = panel2_x + panel_width + 6

        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö - v1.0"
        stdscr.addstr(1, (width - len(title)) // 2, title, curses.A_BOLD)

        # –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª–∏
        self.draw_box(stdscr, start_y, panel1_x, panel_height, panel_width, "–ò—Å—Ç–æ—á–Ω–∏–∫")
        self.draw_box(stdscr, start_y, panel2_x, panel_height, panel_width, "–û–±—Ä–∞–±–æ—Ç–∫–∞")
        self.draw_box(stdscr, start_y, panel3_x, panel_height, panel_width, "–†–µ–∑—É–ª—å—Ç–∞—Ç")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–µ–π
        for i, line in enumerate(self.panel1_content):
            if i < panel_height - 2:
                stdscr.addstr(start_y + i + 1, panel1_x + 2, line[:panel_width - 4])

        for i, line in enumerate(self.panel2_content):
            if i < panel_height - 2:
                stdscr.addstr(start_y + i + 1, panel2_x + 2, line[:panel_width - 4])

        for i, line in enumerate(self.panel3_content):
            if i < panel_height - 2:
                stdscr.addstr(start_y + i + 1, panel3_x + 2, line[:panel_width - 4])

        # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º—ã—á–∫–∏ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
        conn_y = start_y + panel_height // 2

        # –ú–µ–∂–¥—É –ø–∞–Ω–µ–ª—å—é 1 –∏ 2
        self.draw_horizontal_connector(stdscr, conn_y, panel1_x + panel_width, 6, "arrows")

        # –ú–µ–∂–¥—É –ø–∞–Ω–µ–ª—å—é 2 –∏ 3
        self.draw_horizontal_connector(stdscr, conn_y, panel2_x + panel_width, 6, "arrows")

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º—ã—á–∫–∞ —Å–Ω–∏–∑—É
        complex_y = start_y + panel_height + 2
        complex_x = (width - 20) // 2
        self.draw_complex_connector(stdscr, complex_y, complex_x)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º—ã—á–∫–µ
        for panel_x in [panel1_x + panel_width // 2, panel2_x + panel_width // 2, panel3_x + panel_width // 2]:
            self.draw_vertical_connector(stdscr, start_y + panel_height, panel_x, 3, "line")

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É —É–∑–ª—É
        center_y = complex_y + 2
        left_conn_x = panel1_x + panel_width // 2
        right_conn_x = panel3_x + panel_width // 2

        # –õ–µ–≤–∞—è –ª–∏–Ω–∏—è
        for x in range(left_conn_x, complex_x):
            stdscr.addch(center_y, x, '‚îÄ')

        # –ü—Ä–∞–≤–∞—è –ª–∏–Ω–∏—è
        for x in range(complex_x + 17, right_conn_x + 1):
            stdscr.addch(center_y, x, '‚îÄ')

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
        info_y = height - 3
        info = "–ö–æ–º–∞–Ω–¥—ã: demo, flow, panel1 —Ç–µ–∫—Å—Ç, exit | –ü–æ—Ç–æ–∫: –ò–°–¢–û–ß–ù–ò–ö ‚Üí –û–ë–†–ê–ë–û–¢–ö–ê ‚Üí –†–ï–ó–£–õ–¨–¢–ê–¢"
        if len(info) < width:
            stdscr.addstr(info_y, (width - len(info)) // 2, info)

        stdscr.refresh()

    def process_command(self, command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã"""
        if command.lower() == "exit":
            self.running = False
        elif command.startswith("panel1 "):
            content = command[7:]
            self.panel1_content = [content[:20], "", ""]
        elif command.startswith("panel2 "):
            content = command[7:]
            self.panel2_content = [content[:20], "", ""]
        elif command.startswith("panel3 "):
            content = command[7:]
            self.panel3_content = [content[:20], "", ""]
        elif command.lower() == "demo":
            self.panel1_content = ["üå°Ô∏è –°–ï–ù–°–û–†", "Temp: 25.6¬∞C", "Status: OK"]
            self.panel2_content = ["‚öôÔ∏è –ü–†–û–¶–ï–°–°–û–†", "AI Model", "Load: 45%"]
            self.panel3_content = ["üìä –ú–û–ù–ò–¢–û–†", "Trend: ‚ÜóÔ∏è", "Format: JSON"]
        elif command.lower() == "flow":
            self.panel1_content = ["üì° INPUT", "Sensor1: OK", "Sensor2: WARN"]
            self.panel2_content = ["üîÑ PROCESS", "Filter: 100%", "Analysis: 78%"]
            self.panel3_content = ["üì§ OUTPUT", "DB: ‚úì", "API: pending"]

    def input_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.running:
            try:
                command = input()
                self.command_queue.put(command)
            except (EOFError, KeyboardInterrupt):
                self.running = False
                break

    def main_loop(self, stdscr):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        curses.curs_set(0)  # –°–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä
        stdscr.nodelay(1)  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
        stdscr.timeout(100)  # –¢–∞–π–º–∞—É—Ç 100ms

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
        input_thread = threading.Thread(target=self.input_handler, daemon=True)
        input_thread.start()

        while self.running:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            try:
                while True:
                    command = self.command_queue.get_nowait()
                    self.process_command(command)
            except queue.Empty:
                pass

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.draw_interface(stdscr)

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            time.sleep(0.1)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("–°–∏—Å—Ç–µ–º–∞ —Å –ø–µ—Ä–µ–º—ã—á–∫–∞–º–∏ (Curses)")
        print("–ö–æ–º–∞–Ω–¥—ã: demo, flow, panel1 —Ç–µ–∫—Å—Ç, exit")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã\n")

        try:
            curses.wrapper(self.main_loop)
        except KeyboardInterrupt:
            pass

        print("\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    app = CursesConnectorApp()
    app.run()