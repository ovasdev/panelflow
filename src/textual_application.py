from textual.app import App, ComposeResult
from textual.containers import Horizontal, Vertical
from textual.widgets import Static, Input
from textual.reactive import reactive
from textual import events


class StatusHeader(Static):
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–Ω–µ–ª—è—Ö"""

    def __init__(self, main_app):
        self.main_app = main_app
        super().__init__("‚Üë/‚Üì –Ω–∞–≤–∏–≥–∞—Ü–∏—è | Enter –æ—Ç–∫—Ä—ã—Ç—å | ‚Üê —Å–≤–µ—Ä–Ω—É—Ç—å | Ctrl+‚Üê‚Üí –ø–∞–Ω–µ–ª–∏")
        self.styles.height = 1
        self.styles.background = "green"
        self.styles.color = "white"
        self.styles.text_align = "center"

    def update_header(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–Ω–µ–ª—è—Ö"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        try:
            active_panel = self.main_app.get_active_panel()
            current_path = active_panel.panel_path or "–ü–∞–Ω–µ–ª—å"
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
            current_name = current_path.split(" > ")[-1] if " > " in current_path else current_path
        except:
            current_name = "–ü–∞–Ω–µ–ª—å"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª—è—Ö —Å–ª–µ–≤–∞
        left_info = ""
        if self.main_app.panel_offset > 0:
            # –ï—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞
            try:
                left_panel_data = self.main_app.panel_stack[self.main_app.panel_offset - 1]
                if left_panel_data:
                    left_name = left_panel_data['path'].split(" > ")[-1]
                    left_info = f"‚óÄ {left_name} | "
            except:
                left_info = "‚óÄ ... | "

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª—è—Ö —Å–ø—Ä–∞–≤–∞
        right_info = ""
        max_visible_index = self.main_app.panel_offset + self.main_app.visible_panels - 1
        if max_visible_index + 1 < len(self.main_app.panel_stack):
            # –ï—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞
            try:
                right_panel_data = self.main_app.panel_stack[max_visible_index + 1]
                if right_panel_data:
                    right_name = right_panel_data['path'].split(" > ")[-1]
                    right_info = f" | {right_name} ‚ñ∂"
            except:
                right_info = " | ... ‚ñ∂"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_text = f"{left_info}{current_name}{right_info}"
        self.update(header_text)


class NavigablePanel(Static):
    """–ü–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º"""

    elements = reactive(list)
    active_element = reactive(0)
    scroll_offset = reactive(0)
    is_active = reactive(False)
    panel_path = reactive("")

    def __init__(self, panel_id: int, **kwargs):
        super().__init__(**kwargs)
        self.panel_id = panel_id
        self.elements = []
        self.active_element = 0
        self.scroll_offset = 0
        self.is_active = False
        self.panel_path = f"–ü–∞–Ω–µ–ª—å {panel_id}"

    def on_mount(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏"""
        self.update_display()

    def watch_elements(self):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self.update_display()

    def watch_active_element(self):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        self.update_display()

    def watch_is_active(self):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏"""
        if self.is_active:
            self.remove_class("panel")
            self.add_class("panel-active")
        else:
            self.remove_class("panel-active")
            self.add_class("panel")
        self.update_display()

    def get_panel_height(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏"""
        try:
            screen_height = self.app.size.height
            # –í—ã—á–∏—Ç–∞–µ–º: header(1) + input(3) + —Ä–∞–º–∫–∏ –ø–∞–Ω–µ–ª–∏(2) + –æ—Ç—Å—Ç—É–ø—ã(2)
            available_height = screen_height - 8
            return max(8, available_height)  # –ú–∏–Ω–∏–º—É–º 8 —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        except:
            return 15

    def get_content_height(self):
        """–ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)"""
        try:
            total_height = self.get_panel_height()

            # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_lines = 2  # –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            if self.panel_path != f"–ü–∞–Ω–µ–ª—å {self.panel_id}":
                header_lines += 1  # –ü—É—Ç—å
            if self.is_active:
                header_lines += 1  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

            # –†–µ–∑–µ—Ä–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_lines = 3

            # –í—ã—Å–æ—Ç–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            content_height = total_height - header_lines - nav_lines
            return max(3, content_height)  # –ú–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–Ω–æ
        except:
            return 8

    def update_scroll(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π"""
        if not self.elements:
            return

        content_height = self.get_content_height()
        current_element = self.active_element
        current_offset = self.scroll_offset
        total_elements = len(self.elements)

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        if current_element >= current_offset + content_height:
            self.scroll_offset = current_element - content_height + 1

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        elif current_element < current_offset:
            self.scroll_offset = current_element

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        max_offset = max(0, total_elements - content_height)
        self.scroll_offset = min(self.scroll_offset, max_offset)
        self.scroll_offset = max(0, self.scroll_offset)

    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        try:
            input_widget = self.app.query_one("#command-input", CustomInput)
            has_text = bool(input_widget.value)
        except:
            has_text = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å
        if self.has_class("panel-hidden"):
            # –î–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.update(
                "–ü–ê–ù–ï–õ–¨ –ù–ï –û–¢–ö–†–´–¢–ê\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Enter –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ\n–ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏\n—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –ø–∞–Ω–µ–ª—å")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        panel_status = "(–ê–ö–¢–ò–í–ù–ê)" if self.is_active else ""
        actual_panel_number = self.app.panel_offset + self.panel_id  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–Ω–µ–ª–∏
        header = f"–ü–ê–ù–ï–õ–¨ {actual_panel_number} {panel_status}"

        if self.panel_path != f"–ü–∞–Ω–µ–ª—å {self.panel_id}":
            header += f"\nüìç {self.panel_path}"

        if self.is_active:
            debug_info = f"\nüîß –ü–æ–ª–µ: {'–ó–ê–ü–û–õ–ù–ï–ù–û' if has_text else '–ü–£–°–¢–û–ï'}"
            debug_info += f" | –°–º–µ—â–µ–Ω–∏–µ: {self.app.panel_offset} | –í–∏–¥–∏–º—ã—Ö: {self.app.visible_panels}"
            header += debug_info

        content_lines = [header, ""]

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        content_height = self.get_content_height()

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏
        if not self.elements:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            for _ in range(content_height):
                content_lines.append("")
            content_lines[2] = "–ü—É—Å—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üí –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è"
        else:
            offset = self.scroll_offset

            # –£—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            available_lines = content_height
            if offset > 0:
                available_lines -= 1  # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–≤–µ—Ä—Ö—É

            total_elements = len(self.elements)
            if offset + available_lines < total_elements:
                available_lines -= 1  # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–Ω–∏–∑—É

            visible_elements = self.elements[offset:offset + available_lines]

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–≤–µ—Ä—Ö—É
            if offset > 0:
                content_lines.append(f"‚¨ÜÔ∏è ... ({offset} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—à–µ)")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for j, element in enumerate(visible_elements):
                global_index = offset + j
                if self.is_active and global_index == self.active_element:
                    content_lines.append(f"[reverse]‚ñ∫ {element}[/reverse]")
                else:
                    content_lines.append(f"‚ñ∫ {element}")

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–Ω–∏–∑—É
            if offset + len(visible_elements) < total_elements:
                remaining = total_elements - (offset + len(visible_elements))
                content_lines.append(f"‚¨áÔ∏è ... ({remaining} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ)")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–º–∏
            total_content_lines = len(content_lines) - 2  # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            while total_content_lines < content_height:
                content_lines.append("")
                total_content_lines += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∞–º—ã–π –Ω–∏–∑
        if self.is_active and self.elements:
            total_elements = len(self.elements)
            actual_panel_number = self.app.panel_offset + self.panel_id
            status_info = ""

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–≤–∏–≥–µ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –ø–∞–Ω–µ–ª–∏ –∏ –≤—ã—à–µ
            if actual_panel_number >= 3:
                status_info = " | Enter = –°–î–í–ò–ì –≤–ø–µ—Ä–µ–¥"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Ctrl+‚Üê –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å–ª–µ–≤–∞
            ctrl_left_info = ""
            if self.panel_id == 1 and self.app.panel_offset > 0:  # –ü–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å –∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–µ–≤–∞
                ctrl_left_info = " | Ctrl+‚Üê = –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–≤–∞"

            content_lines.extend([
                "‚îÄ" * 30,  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                f"–≠–ª–µ–º–µ–Ω—Ç {self.active_element + 1} –∏–∑ {total_elements}{status_info}{ctrl_left_info}",
                "Enter –æ—Ç–∫—Ä—ã—Ç—å | ‚Üë‚Üì –Ω–∞–≤–∏–≥–∞—Ü–∏—è | ‚Üê —Å–≤–µ—Ä–Ω—É—Ç—å" if not has_text else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"
            ])
        elif self.is_active:
            # –î–ª—è –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
            content_lines.extend([
                "‚îÄ" * 30,
                f"–ü–∞–Ω–µ–ª—å –ø—É—Å—Ç–∞",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
            ])
        else:
            # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π - –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            content_lines.extend(["", "", ""])

        self.update("\n".join(content_lines))

    def move_up(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        if self.active_element > 0:
            self.active_element -= 1
            self.update_scroll()

    def move_down(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        if self.elements and self.active_element < len(self.elements) - 1:
            self.active_element += 1
            self.update_scroll()

    def add_element(self, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç"""
        self.elements = self.elements + [text]
        self.active_element = len(self.elements) - 1
        self.update_scroll()

    def clear_elements(self):
        """–û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        self.elements = []
        self.active_element = 0
        self.scroll_offset = 0


class CustomInput(Input):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""

    def __init__(self, **kwargs):
        super().__init__(placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞...", **kwargs)
        self.styles.dock = "bottom"
        self.styles.height = 3
        self.styles.margin = 0
        self.styles.padding = 1


class ThreePanelApp(App):
    """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç—Ä–µ–º—è –ø–∞–Ω–µ–ª—è–º–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º"""

    CSS = """
    Screen {
        layout: vertical;
        padding: 0;
    }

    #main {
        layout: horizontal;
        height: 1fr;
        padding: 0;
        margin: 0;
    }

    .panel {
        width: 33.33%;
        height: 1fr;
        border: solid white;
        padding: 1;
        margin: 0;
    }

    .panel-active {
        width: 33.33%;
        height: 1fr;
        border: solid green;
        background: darkgreen 10%;
        padding: 1;
        margin: 0;
    }

    .panel-hidden {
        width: 33.33%;
        height: 1fr;
        border: solid #333333;
        background: #111111;
        color: #333333;
        padding: 1;
        margin: 0;
    }
    """

    def __init__(self):
        super().__init__()
        self.active_panel = 0
        self.visible_panels = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –ø–∞–Ω–µ–ª–µ–π (1, 2 –∏–ª–∏ 3)
        self.panel_offset = 0  # –°–º–µ—â–µ–Ω–∏–µ "–æ–∫–Ω–∞" –ø–∞–Ω–µ–ª–µ–π (0 = –ø–æ–∫–∞–∑–∞–Ω—ã –ø–∞–Ω–µ–ª–∏ 1-3, 1 = –ø–∞–Ω–µ–ª–∏ 2-4, –∏ —Ç.–¥.)
        self.panel_stack = []  # –°—Ç–µ–∫ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.sub_elements = {
            "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã": ["üìÑ –æ—Ç—á–µ—Ç.docx", "üìÑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.pptx", "üìÅ –ê—Ä—Ö–∏–≤", "üìÑ –∑–∞–º–µ—Ç–∫–∏.txt"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç—ã": ["üìÅ –ü—Ä–æ–µ–∫—Ç –ê", "üìÅ –ü—Ä–æ–µ–∫—Ç –ë", "üìÑ –ø–ª–∞–Ω.md", "üìÑ TODO.txt"],
            "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": ["üñºÔ∏è —Ñ–æ—Ç–æ1.jpg", "üñºÔ∏è —Ñ–æ—Ç–æ2.png", "üñºÔ∏è –ª–æ–≥–æ—Ç–∏–ø.svg"],
            "üìÑ readme.txt": ["–°—Ç—Ä–æ–∫–∞ 1: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–°—Ç—Ä–æ–∫–∞ 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–°—Ç—Ä–æ–∫–∞ 3: –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            "üìÑ config.json": ["{ \"version\": \"1.0\" }", "{ \"debug\": true }", "{ \"theme\": \"dark\" }"],
            "üìÅ –ê—Ä—Ö–∏–≤": ["üìÑ —Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª1.txt", "üìÑ —Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª2.doc"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç –ê": ["üìÑ main.py", "üìÑ utils.py", "üìÅ tests"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç –ë": ["üìÑ app.js", "üìÑ style.css", "üìÑ index.html"],
            "üìÅ tests": ["üìÑ test_main.py", "üìÑ test_utils.py"]
        }

    def compose(self) -> ComposeResult:
        """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        yield StatusHeader(self)

        with Horizontal(id="main"):
            yield NavigablePanel(1, classes="panel-active", id="panel1")
            yield NavigablePanel(2, classes="panel", id="panel2")
            yield NavigablePanel(3, classes="panel", id="panel3")

        yield CustomInput(id="command-input")

    def on_mount(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–µ–∫ –ø–∞–Ω–µ–ª–µ–π
        initial_data = {
            'elements': ["üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üìÑ readme.txt", "üìÑ config.json"],
            'path': "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞",
            'active_element': 0,
            'scroll_offset': 0
        }
        self.panel_stack = [initial_data]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏
        panel1 = self.query_one("#panel1", NavigablePanel)
        panel1.elements = initial_data['elements']
        panel1.is_active = True
        panel1.panel_path = initial_data['path']

        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –∏ —Ç—Ä–µ—Ç—å—é –ø–∞–Ω–µ–ª–∏
        self.update_panel_visibility()
        self.update_header()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_widget = self.query_one("#command-input", CustomInput)
        input_widget.focus()

    def update_panel_visibility(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–µ–π"""
        panels = [
            self.query_one("#panel1", NavigablePanel),
            self.query_one("#panel2", NavigablePanel),
            self.query_one("#panel3", NavigablePanel)
        ]

        for i, panel in enumerate(panels):
            if i < self.visible_panels:
                # –ü–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞
                panel.remove_class("panel-hidden")
                if i == self.active_panel:
                    panel.remove_class("panel")
                    panel.add_class("panel-active")
                else:
                    panel.remove_class("panel-active")
                    panel.add_class("panel")
            else:
                # –ü–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø—É—Å—Ç—É—é
                panel.remove_class("panel")
                panel.remove_class("panel-active")
                panel.add_class("panel-hidden")
                panel.elements = []  # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                panel.panel_path = ""
                panel.is_active = False

    def on_key(self, event: events.Key) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"""
        input_widget = self.query_one("#command-input", CustomInput)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ Input –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —Ç–æ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
        if input_widget.has_focus and input_widget.value:
            # –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Esc –∏ Ctrl+—Å—Ç—Ä–µ–ª–∫–∏
            if event.key == "escape":
                input_widget.value = ""
                return
            elif event.key in ["ctrl+right", "ctrl+left"]:
                input_widget.value = ""
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∏–∂–µ
            else:
                # –ü–æ–∑–≤–æ–ª—è–µ–º Input –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if event.key == "ctrl+right":
            self.navigate_between_visible_panels("right")
        elif event.key == "ctrl+left":
            self.navigate_between_visible_panels("left")
        elif event.key == "left" and not input_widget.value:
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ –ø—Ä–∞–≤–µ–µ
            self.collapse_current_and_right_panels()
        elif event.key == "right" and not input_widget.value:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass
        elif event.key == "enter" and not input_widget.value:
            self.open_element_with_enter()
        elif event.key == "down" and not input_widget.value:
            self.move_element_down()
        elif event.key == "up" and not input_widget.value:
            self.move_element_up()

    def get_active_panel(self) -> NavigablePanel:
        """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        return self.query_one(f"#panel{self.active_panel + 1}", NavigablePanel)

    def switch_panel(self, new_panel):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞
        if new_panel >= self.visible_panels:
            return

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å
        current_panel = self.get_active_panel()
        current_panel.is_active = False

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        self.active_panel = new_panel
        new_active_panel = self.get_active_panel()
        new_active_panel.is_active = True

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.update_panel_visibility()
        self.update_header()

    def open_element_with_enter(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ Enter - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å –∏–ª–∏ —Å–º–µ—â–∞–µ–º"""
        current_panel = self.get_active_panel()
        if not current_panel.elements:
            return

        element = current_panel.elements[current_panel.active_element]
        sub_elements = self.sub_elements.get(element, [f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {element}"])

        if self.active_panel == 2:  # –ï—Å–ª–∏ –Ω–∞ —Ç—Ä–µ—Ç—å–µ–π –ø–∞–Ω–µ–ª–∏
            # –°–º–µ—â–∞–µ–º –ø–∞–Ω–µ–ª–∏: 2‚Üí1, 3‚Üí2, –Ω–æ–≤–∞—è‚Üí3
            self.shift_panels_left(element, sub_elements)
        elif self.active_panel == 0:  # –ü–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å
            if self.visible_panels == 1:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–∞–Ω–µ–ª—å
                self.open_next_panel(element, sub_elements)
            else:
                # –í—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                self.update_existing_panel(1, element, sub_elements)
        elif self.active_panel == 1:  # –í—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å
            if self.visible_panels == 2:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ—Ç—å—é –ø–∞–Ω–µ–ª—å
                self.open_next_panel(element, sub_elements)
            else:
                # –¢—Ä–µ—Ç—å—è –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                self.update_existing_panel(2, element, sub_elements)

    def update_existing_panel(self, panel_index, selected_element, new_elements):
        """–û–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–∞–Ω–µ–ª—å"""
        current_panel = self.get_active_panel()
        target_panel = self.query_one(f"#panel{panel_index + 1}", NavigablePanel)

        target_panel.elements = new_elements
        target_panel.active_element = 0
        target_panel.scroll_offset = 0
        target_panel.panel_path = f"{current_panel.panel_path} > {selected_element}"

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫–µ
        stack_index = self.panel_offset + panel_index
        if stack_index < len(self.panel_stack):
            self.panel_stack[stack_index] = {
                'elements': new_elements[:],
                'path': target_panel.panel_path,
                'active_element': 0,
                'scroll_offset': 0
            }

        # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π
        if panel_index == 1:  # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—Ç–æ—Ä—É—é –ø–∞–Ω–µ–ª—å, –æ—á–∏—Å—Ç–∏–º —Ç—Ä–µ—Ç—å—é
            panel3 = self.query_one("#panel3", NavigablePanel)
            panel3.elements = []
            panel3.panel_path = ""
            self.visible_panels = 2

            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–µ–∫–∞ —Ç–æ–∂–µ
            stack_index_3 = self.panel_offset + 2
            if stack_index_3 < len(self.panel_stack):
                self.panel_stack = self.panel_stack[:stack_index_3]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        self.switch_panel(panel_index)

    def shift_panels_left(self, selected_element, new_elements):
        """–°–º–µ—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ –≤–ª–µ–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø—Ä–∞–≤–∞"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–¥–≤–∏–≥ –ø–∞–Ω–µ–ª–µ–π –í–ü–†–ê–í–û. –≠–ª–µ–º–µ–Ω—Ç: {selected_element}")

        panel1 = self.query_one("#panel1", NavigablePanel)
        panel2 = self.query_one("#panel2", NavigablePanel)
        panel3 = self.query_one("#panel3", NavigablePanel)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞–Ω–µ–ª–µ–π –≤ —Å—Ç–µ–∫
        current_stack_index = self.panel_offset

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤ —Å—Ç–µ–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞
        while len(self.panel_stack) <= current_stack_index + 2:
            self.panel_stack.append(None)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–µ–π –≤ —Å—Ç–µ–∫
        self.panel_stack[current_stack_index] = {
            'elements': panel1.elements[:],
            'path': panel1.panel_path,
            'active_element': panel1.active_element,
            'scroll_offset': panel1.scroll_offset
        }

        self.panel_stack[current_stack_index + 1] = {
            'elements': panel2.elements[:],
            'path': panel2.panel_path,
            'active_element': panel2.active_element,
            'scroll_offset': panel2.scroll_offset
        }

        self.panel_stack[current_stack_index + 2] = {
            'elements': panel3.elements[:],
            'path': panel3.panel_path,
            'active_element': panel3.active_element,
            'scroll_offset': panel3.scroll_offset
        }

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ (—Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏)
        self.panel_offset += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –≤ —Å—Ç–µ–∫
        new_panel_data = {
            'elements': new_elements,
            'path': f"{panel3.panel_path} > {selected_element}",
            'active_element': 0,
            'scroll_offset': 0
        }

        if len(self.panel_stack) <= self.panel_offset + 2:
            self.panel_stack.append(new_panel_data)
        else:
            self.panel_stack[self.panel_offset + 2] = new_panel_data

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –ø–∞–Ω–µ–ª–µ–π
        self.load_panels_from_stack()

        print(f"‚úÖ –°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–º–µ—â–µ–Ω–∏–µ: {self.panel_offset}")

    def update_header(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        try:
            header = self.query_one(StatusHeader)
            header.update_header()
        except:
            pass

    def collapse_current_and_right_panels(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å –∏ –≤—Å–µ –ø—Ä–∞–≤–µ–µ –µ—ë"""
        print(f"üîÑ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ {self.active_panel + 1} –∏ –ø—Ä–∞–≤–µ–µ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_current_panels_to_stack()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª–µ–π –Ω—É–∂–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç—å
        panels_to_collapse = 3 - self.active_panel  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å 0, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º 3, –µ—Å–ª–∏ 1 - —Ç–æ 2, –µ—Å–ª–∏ 2 - —Ç–æ 1

        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç–µ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        current_global_index = self.panel_offset + self.active_panel
        self.panel_stack = self.panel_stack[:current_global_index]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞, —Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
        if self.panel_offset > 0:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            new_offset = max(0, self.panel_offset - panels_to_collapse)
            self.panel_offset = new_offset

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
            self.load_panels_from_stack()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å–ª–µ–≤–∞, –ø—Ä–æ—Å—Ç–æ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö
            if self.active_panel > 0:
                self.visible_panels = self.active_panel
                self.active_panel = self.active_panel - 1
            else:
                # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è
                self.visible_panels = 1
                self.active_panel = 0

            # –û—á–∏—â–∞–µ–º —Å–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–∞–Ω–µ–ª–∏
            for i in range(self.visible_panels, 3):
                panel = self.query_one(f"#panel{i + 1}", NavigablePanel)
                panel.elements = []
                panel.panel_path = ""
                panel.is_active = False

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            for i in range(3):
                panel = self.query_one(f"#panel{i + 1}", NavigablePanel)
                panel.is_active = (i == self.active_panel)

            self.update_panel_visibility()

        self.update_header()
        print(f"‚úÖ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–º–µ—â–µ–Ω–∏–µ: {self.panel_offset}, –≤–∏–¥–∏–º—ã—Ö: {self.visible_panels}")

    def save_current_panels_to_stack(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞–Ω–µ–ª–µ–π –≤ —Å—Ç–µ–∫"""
        panel1 = self.query_one("#panel1", NavigablePanel)
        panel2 = self.query_one("#panel2", NavigablePanel)
        panel3 = self.query_one("#panel3", NavigablePanel)

        panels = [panel1, panel2, panel3]

        for i, panel in enumerate(panels):
            stack_index = self.panel_offset + i
            if stack_index < len(self.panel_stack) and self.panel_stack[stack_index] is not None:
                self.panel_stack[stack_index] = {
                    'elements': panel.elements[:],
                    'path': panel.panel_path,
                    'active_element': panel.active_element,
                    'scroll_offset': panel.scroll_offset
                }

    def load_panels_from_stack(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–µ–π –∏–∑ —Å—Ç–µ–∫–∞"""
        panel1 = self.query_one("#panel1", NavigablePanel)
        panel2 = self.query_one("#panel2", NavigablePanel)
        panel3 = self.query_one("#panel3", NavigablePanel)

        panels = [panel1, panel2, panel3]

        for i, panel in enumerate(panels):
            stack_index = self.panel_offset + i
            if stack_index < len(self.panel_stack) and self.panel_stack[stack_index] is not None:
                data = self.panel_stack[stack_index]
                panel.elements = data['elements'][:]
                panel.panel_path = data['path']
                panel.active_element = data['active_element']
                panel.scroll_offset = data['scroll_offset']
                panel.is_active = (i == self.active_panel)
            else:
                # –ü–∞–Ω–µ–ª—å –ø—É—Å—Ç–∞
                panel.elements = []
                panel.panel_path = ""
                panel.active_element = 0
                panel.scroll_offset = 0
                panel.is_active = False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        max_visible = 0
        for i in range(3):
            stack_index = self.panel_offset + i
            if stack_index < len(self.panel_stack) and self.panel_stack[stack_index] is not None:
                max_visible = i + 1

        self.visible_panels = max_visible

        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∏–¥–∏–º–∞—è
        self.active_panel = min(2, max_visible - 1)
        if max_visible > 0:
            panels[self.active_panel].is_active = True

        self.update_panel_visibility()
        self.update_header()

    def open_next_panel(self, selected_element, new_elements):
        """–û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏"""
        current_panel = self.get_active_panel()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å
        self.visible_panels = self.active_panel + 2

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å
        next_panel_id = self.active_panel + 1
        next_panel = self.query_one(f"#panel{next_panel_id + 1}", NavigablePanel)
        next_panel.elements = new_elements
        next_panel.active_element = 0
        next_panel.scroll_offset = 0
        next_panel.panel_path = f"{current_panel.panel_path} > {selected_element}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        stack_index = self.panel_offset + next_panel_id
        while len(self.panel_stack) <= stack_index:
            self.panel_stack.append(None)

        self.panel_stack[stack_index] = {
            'elements': new_elements[:],
            'path': next_panel.panel_path,
            'active_element': 0,
            'scroll_offset': 0
        }

        # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if next_panel_id + 1 < 3:
            right_panel = self.query_one("#panel3", NavigablePanel)
            right_panel.elements = []
            right_panel.panel_path = ""

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏
        self.switch_panel(next_panel_id)

    def navigate_between_visible_panels(self, direction):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –≤–∏–¥–∏–º—ã–º–∏ –ø–∞–Ω–µ–ª—è–º–∏"""
        if direction == "right" and self.active_panel < self.visible_panels - 1:
            self.switch_panel(self.active_panel + 1)
        elif direction == "left":
            if self.active_panel > 0:
                # –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å
                self.switch_panel(self.active_panel - 1)
            elif self.active_panel == 0 and self.panel_offset > 0:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å–ª–µ–≤–∞
                # –°–º–µ—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ –≤–ø—Ä–∞–≤–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞)
                self.shift_panels_right_to_show_left()

    def shift_panels_right_to_show_left(self):
        """–°–º–µ—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ –≤–ø—Ä–∞–≤–æ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞"""
        if self.panel_offset <= 0:
            return  # –ù–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å–ª–µ–≤–∞

        print(f"üîÑ –°–º–µ—â–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –í–ü–†–ê–í–û (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞)")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–µ–π –≤ —Å—Ç–µ–∫
        self.save_current_panels_to_stack()

        # –£–º–µ–Ω—å—à–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 (—Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ –≤ —Å—Ç–µ–∫–µ)
        self.panel_offset -= 1

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
        self.load_panels_from_stack()

        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π
        self.active_panel = 0

        print(f"‚úÖ –°–º–µ—â–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: {self.panel_offset}")
        print(f"   –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑–∞–Ω—ã –ø–∞–Ω–µ–ª–∏ {self.panel_offset + 1}-{self.panel_offset + self.visible_panels}")

    def move_element_down(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        active_panel = self.get_active_panel()
        active_panel.move_down()

    def move_element_up(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É"""
        active_panel = self.get_active_panel()
        active_panel.move_up()

    def on_input_submitted(self, event: Input.Submitted) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        user_input = event.value.strip()

        if not user_input:
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_input.lower() == "exit":
            self.exit()
            return
        elif user_input.lower() == "clear":
            active_panel = self.get_active_panel()
            active_panel.clear_elements()
        elif user_input.lower() == "help":
            self.show_help()
        elif user_input.lower() == "reset":
            self.reset_all_panels()
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            active_panel = self.get_active_panel()
            active_panel.add_element(user_input)

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        event.input.value = ""

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É"""
        help_elements = [
            "=== –£–ú–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===",
            "‚Ä¢ ‚Üê –Ω–∞ –ª—é–±–æ–π –ø–∞–Ω–µ–ª–∏ = –°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï",
            "  - –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏ –≤—Å–µ –ø—Ä–∞–≤–µ–µ",
            "  - –°–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∑–∞–ø–æ–ª–Ω—è—é—Ç –º–µ—Å—Ç–æ",
            "",
            "=== CTRL+–°–¢–†–ï–õ–ö–ò ===",
            "‚Ä¢ Ctrl+‚Üí = –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∏–¥–∏–º–æ–π –ø–∞–Ω–µ–ª–∏",
            "‚Ä¢ Ctrl+‚Üê = –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∏–¥–∏–º–æ–π –ø–∞–Ω–µ–ª–∏",
            "‚Ä¢ Ctrl+‚Üê –ù–ê –ü–ï–†–í–û–ô –ü–ê–ù–ï–õ–ò –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–µ–≤–∞:",
            "  - –°–º–µ—â–∞–µ—Ç –ø–∞–Ω–µ–ª–∏ –í–ü–†–ê–í–û",
            "  - –°–∫—Ä—ã—Ç–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ ‚Üí —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤–æ–π",
            "  - –ü–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Üí —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Ç–æ—Ä–æ–π",
            "  - –í—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å ‚Üí —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç—Ä–µ—Ç—å–µ–π",
            "",
            "=== –ó–ê–ì–û–õ–û–í–û–ö ===",
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏",
            "‚Ä¢ ‚óÄ –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞",
            "‚Ä¢ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚ñ∂ - —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞",
            "",
            "=== –ù–ê–í–ò–ì–ê–¶–ò–Ø –í–ü–ï–†–ï–î ===",
            "‚Ä¢ Enter –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ:",
            "  - –ü–∞–Ω–µ–ª–∏ 1-2: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é",
            "  - –ü–∞–Ω–µ–ª—å ‚â•3: –°–î–í–ò–ì –≤–ª–µ–≤–æ (–≤–ø–µ—Ä–µ–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏)",
            "",
            "=== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ù–ê–ó–ê–î ===",
            "‚Ä¢ ‚Üê (–ª–µ–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞) = —É–º–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ:",
            "  - –ù–∞ –ø–∞–Ω–µ–ª–∏ 1: –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
            "  - –ù–∞ –ø–∞–Ω–µ–ª–∏ 2: –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª—å 1",
            "  - –ù–∞ –ø–∞–Ω–µ–ª–∏ 3: –æ—Å—Ç–∞—é—Ç—Å—è –ø–∞–Ω–µ–ª–∏ 1-2",
            "  - –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Å–ª–µ–≤–∞:",
            "    –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ",
            "",
            "=== –£–ü–†–ê–í–õ–ï–ù–ò–ï ===",
            "‚Ä¢ ‚Üë/‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º",
            "‚Ä¢ Enter - –æ—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
            "‚Ä¢ ‚Üê - —É–º–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ",
            "‚Ä¢ Ctrl+‚Üê/‚Üí - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏",
            "‚Ä¢ Ctrl+‚Üê –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–∞–Ω–µ–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—É—é —Å–ª–µ–≤–∞",
            "",
            "=== –í–í–û–î –¢–ï–ö–°–¢–ê ===",
            "‚Ä¢ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ",
            "‚Ä¢ –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ = –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏",
            "‚Ä¢ –ï—Å—Ç—å —Ç–µ–∫—Å—Ç = —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            "‚Ä¢ Esc - –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞",
            "",
            "=== –ö–û–ú–ê–ù–î–´ ===",
            "‚Ä¢ —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
            "‚Ä¢ clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª—å",
            "‚Ä¢ reset - —Å–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—É",
            "‚Ä¢ exit - –≤—ã—Ö–æ–¥"
        ]

        active_panel = self.get_active_panel()
        active_panel.elements = help_elements
        active_panel.active_element = 0
        active_panel.scroll_offset = 0

    def reset_all_panels(self):
        """–°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –∫ –Ω–∞—á–∞–ª—É
        self.visible_panels = 1
        self.active_panel = 0
        self.panel_offset = 0

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –ø–∞–Ω–µ–ª–µ–π
        initial_data = {
            'elements': ["üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üìÑ readme.txt", "üìÑ config.json"],
            'path': "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞",
            'active_element': 0,
            'scroll_offset': 0
        }
        self.panel_stack = [initial_data]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.load_panels_from_stack()

        print("üîÑ –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–ª–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π")
    print("=" * 70)
    print("–£–ú–ù–û–ï –°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï:")
    print("‚Ä¢ ‚Üê –Ω–∞ –ª—é–±–æ–π –ø–∞–Ω–µ–ª–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ—ë –∏ –≤—Å–µ –ø—Ä–∞–≤–µ–µ")
    print("‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –º–µ—Å—Ç–æ")
    print("‚Ä¢ –ù–∞ –ø–∞–Ω–µ–ª–∏ 1: ‚Üê –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç")
    print("‚Ä¢ –ù–∞ –ø–∞–Ω–µ–ª–∏ 2: ‚Üê –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª—å 1")
    print("‚Ä¢ –ù–∞ –ø–∞–Ω–µ–ª–∏ 3: ‚Üê –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª–∏ 1-2")
    print()
    print("CTRL+–°–¢–†–ï–õ–ö–ò (–£–ú–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø):")
    print("‚Ä¢ Ctrl+‚Üí - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∏–¥–∏–º–æ–π –ø–∞–Ω–µ–ª–∏")
    print("‚Ä¢ Ctrl+‚Üê - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∏–¥–∏–º–æ–π –ø–∞–Ω–µ–ª–∏")
    print("‚Ä¢ Ctrl+‚Üê –ù–ê –ü–ï–†–í–û–ô –ü–ê–ù–ï–õ–ò (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–µ–≤–∞):")
    print("  - –°–º–µ—â–∞–µ—Ç –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –í–ü–†–ê–í–û")
    print("  - –°–∫—Ä—ã—Ç–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ ‚Üí –ø–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å")
    print("  - –ü–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Üí –≤—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å")
    print("  - –í—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å ‚Üí —Ç—Ä–µ—Ç—å—è –ø–∞–Ω–µ–ª—å")
    print("  - –ü–æ–∑–≤–æ–ª—è–µ—Ç '–ª–∏—Å—Ç–∞—Ç—å' –Ω–∞–∑–∞–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print()
    print("–ò–ù–§–û–†–ú–ê–¢–ò–í–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö:")
    print("‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
    print("‚Ä¢ ‚óÄ –Ω–∞–∑–≤–∞–Ω–∏–µ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞")
    print("‚Ä¢ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚ñ∂ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞")
    print("‚Ä¢ –ü—Ä–∏–º–µ—Ä: '‚óÄ –î–æ–∫—É–º–µ–Ω—Ç—ã | –ê—Ä—Ö–∏–≤ | tests ‚ñ∂'")
    print()
    print("–ù–ê–í–ò–ì–ê–¶–ò–Ø –í–ü–ï–†–ï–î:")
    print("‚Ä¢ Enter –Ω–∞ –ø–∞–Ω–µ–ª—è—Ö 1-2 - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é")
    print("‚Ä¢ Enter –Ω–∞ –ø–∞–Ω–µ–ª–∏ ‚â•3 - –°–î–í–ò–ì –ø–∞–Ω–µ–ª–µ–π –≤–ª–µ–≤–æ (–≤–ø–µ—Ä–µ–¥)")
    print("‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –±–æ–ª—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º")
    print()
    print("–£–ü–†–ê–í–õ–ï–ù–ò–ï:")
    print("‚Ä¢ ‚Üë/‚Üì - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º")
    print("‚Ä¢ Enter - –æ—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç (–¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥)")
    print("‚Ä¢ ‚Üê - —É–º–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ")
    print("‚Ä¢ Ctrl+‚Üê/‚Üí - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏ + —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    print()
    print("–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã")
    print("‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π")
    print("‚Ä¢ –ü–æ–ª–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å Ctrl+—Å—Ç—Ä–µ–ª–∫–∞–º–∏")
    print("‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
    print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π")
    print("=" * 70)

    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")

    app = ThreePanelApp()
    app.run()


if __name__ == "__main__":
    main()