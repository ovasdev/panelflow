from textual.app import App, ComposeResult
from textual.containers import Horizontal, Vertical
from textual.widgets import Static, Input
from textual import events


class ThreePanelApp(App):
    """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏"""

    CSS = """
    Screen {
        layout: vertical;
    }

    #header {
        height: 1;
        background: green;
        color: white;
        text-align: center;
        margin-bottom: 1;
    }

    #main {
        layout: horizontal;
        height: 1fr;
    }

    .panel {
        width: 1fr;
        border: solid white;
        padding: 1;
    }

    .panel-active {
        width: 1fr;
        border: solid green;
        background: darkgreen 10%;
        padding: 1;
    }

    #input-container {
        height: 3;
        margin-top: 1;
    }

    Input {
        margin: 1;
    }
    """

    def __init__(self):
        super().__init__()
        self.active_panel = 0  # 0, 1, 2 –¥–ª—è –ø–∞–Ω–µ–ª–µ–π 1, 2, 3
        self.active_element = [0, 0, 0]  # –ê–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏
        self.scroll_offset = [0, 0, 0]  # –°–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏

        # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —ç–ª–µ–º–µ–Ω—Ç -> —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.panel_elements = [
            ["üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üìÑ readme.txt", "üìÑ config.json"],
            [],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏ 1
            []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏ 2
        ]

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.sub_elements = {
            "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã": ["üìÑ –æ—Ç—á–µ—Ç.docx", "üìÑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.pptx", "üìÅ –ê—Ä—Ö–∏–≤", "üìÑ –∑–∞–º–µ—Ç–∫–∏.txt"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç—ã": ["üìÅ –ü—Ä–æ–µ–∫—Ç –ê", "üìÅ –ü—Ä–æ–µ–∫—Ç –ë", "üìÑ –ø–ª–∞–Ω.md", "üìÑ TODO.txt"],
            "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": ["üñºÔ∏è —Ñ–æ—Ç–æ1.jpg", "üñºÔ∏è —Ñ–æ—Ç–æ2.png", "üñºÔ∏è –ª–æ–≥–æ—Ç–∏–ø.svg"],
            "üìÑ readme.txt": ["–°—Ç—Ä–æ–∫–∞ 1: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–°—Ç—Ä–æ–∫–∞ 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–°—Ç—Ä–æ–∫–∞ 3: –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            "üìÑ config.json": ["{ \"version\": \"1.0\" }", "{ \"debug\": true }", "{ \"theme\": \"dark\" }"],
            "üìÅ –ê—Ä—Ö–∏–≤": ["üìÑ —Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª1.txt", "üìÑ —Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª2.doc"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç –ê": ["üìÑ main.py", "üìÑ utils.py", "üìÅ tests"],
            "üìÅ –ü—Ä–æ–µ–∫—Ç –ë": ["üìÑ app.js", "üìÑ style.css", "üìÑ index.html"],
            "üìÅ tests": ["üìÑ test_main.py", "üìÑ test_utils.py"]
        }

        # –ü—É—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        self.panel_paths = ["–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞", "", ""]

    def compose(self) -> ComposeResult:
        """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        yield Static("‚Üí/‚Üê –æ—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç | ‚Üë/‚Üì –Ω–∞–≤–∏–≥–∞—Ü–∏—è | Ctrl+‚Üê‚Üí —Å–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–µ–π", id="header")

        with Horizontal(id="main"):
            yield Static("", classes="panel-active", id="panel1")
            yield Static("", classes="panel", id="panel2")
            yield Static("", classes="panel", id="panel3")

        yield Input(placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞...", id="command-input")

    def get_panel_height(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏"""
        # –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ä–∞–º–∫–∏ –ø–∞–Ω–µ–ª–∏, –ø–æ–ª–µ –≤–≤–æ–¥–∞
        screen_height = self.size.height
        available_height = screen_height - 6  # –ó–∞–≥–æ–ª–æ–≤–æ–∫(1) + —Ä–∞–º–∫–∏(2) + –≤–≤–æ–¥(3)
        return max(5, available_height - 3)  # –ú–∏–Ω–∏–º—É–º 5 —Å—Ç—Ä–æ–∫, —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏

    def on_key(self, event: events.Key) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à"""
        if event.key == "ctrl+right":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏
            if self.active_panel < 2:
                self.active_panel += 1
                self.update_display()
                event.prevent_default()
        elif event.key == "ctrl+left":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏
            if self.active_panel > 0:
                self.active_panel -= 1
                self.update_display()
                event.prevent_default()
        elif event.key == "right":
            # –û—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏
            self.open_element_right()
            event.prevent_default()
        elif event.key == "left":
            # –û—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏ (–Ω–∞–∑–∞–¥)
            self.open_element_left()
            event.prevent_default()
        elif event.key == "down":
            # –°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            self.move_element_down()
            event.prevent_default()
        elif event.key == "up":
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            self.move_element_up()
            event.prevent_default()

    def move_element_down(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        max_elements = len(self.panel_elements[self.active_panel])
        if max_elements > 0 and self.active_element[self.active_panel] < max_elements - 1:
            self.active_element[self.active_panel] += 1
            self.update_scroll()
            self.update_display()

    def move_element_up(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        if self.active_element[self.active_panel] > 0:
            self.active_element[self.active_panel] -= 1
            self.update_scroll()
            self.update_display()

    def update_scroll(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        panel_height = self.get_panel_height()
        current_element = self.active_element[self.active_panel]
        current_offset = self.scroll_offset[self.active_panel]

        # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        if current_element >= current_offset + panel_height:
            self.scroll_offset[self.active_panel] = current_element - panel_height + 1

        # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        elif current_element < current_offset:
            self.scroll_offset[self.active_panel] = current_element

    def open_element_right(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏"""
        if self.active_panel < 2 and self.panel_elements[self.active_panel]:
            current_element = self.panel_elements[self.active_panel][self.active_element[self.active_panel]]

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã
            sub_elements = self.sub_elements.get(current_element, [f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {current_element}"])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–µ–ª—å
            next_panel = self.active_panel + 1
            self.panel_elements[next_panel] = sub_elements
            self.active_element[next_panel] = 0
            self.scroll_offset[next_panel] = 0
            self.panel_paths[next_panel] = f"{self.panel_paths[self.active_panel]} > {current_element}"

            # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞
            if next_panel + 1 < 3:
                self.panel_elements[next_panel + 1] = []
                self.panel_paths[next_panel + 1] = ""

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏
            self.active_panel = next_panel
            self.update_display()

    def open_element_left(self):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏"""
        if self.active_panel > 0:
            self.active_panel -= 1

            # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
            for i in range(self.active_panel + 1, 3):
                self.panel_elements[i] = []
                self.panel_paths[i] = ""

            self.update_display()

    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        for i in range(3):
            panel = self.query_one(f"#panel{i + 1}", Static)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if i == self.active_panel:
                panel.remove_class("panel")
                panel.add_class("panel-active")
                panel_status = "(–ê–ö–¢–ò–í–ù–ê)"
            else:
                panel.remove_class("panel-active")
                panel.add_class("panel")
                panel_status = ""

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
            path = self.panel_paths[i] or f"–ü–∞–Ω–µ–ª—å {i + 1}"
            header = f"–ü–ê–ù–ï–õ–¨ {i + 1} {panel_status}"
            if path != f"–ü–∞–Ω–µ–ª—å {i + 1}":
                header += f"\nüìç {path}"

            content_lines = [header, ""]

            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            if not self.panel_elements[i]:
                content_lines.append("–ü—É—Å—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üí –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
            else:
                panel_height = self.get_panel_height()
                offset = self.scroll_offset[i]
                visible_elements = self.panel_elements[i][offset:offset + panel_height]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–≤–µ—Ä—Ö—É
                if offset > 0:
                    content_lines.append(f"‚¨ÜÔ∏è ... ({offset} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—à–µ)")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for j, element in enumerate(visible_elements):
                    global_index = offset + j
                    if i == self.active_panel and global_index == self.active_element[i]:
                        # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        content_lines.append(f"[reverse]‚ñ∫ {element}[/reverse]")
                    else:
                        content_lines.append(f"‚ñ∫ {element}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–Ω–∏–∑—É
                total_elements = len(self.panel_elements[i])
                if offset + panel_height < total_elements:
                    remaining = total_elements - (offset + panel_height)
                    content_lines.append(f"‚¨áÔ∏è ... ({remaining} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ)")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                if i == self.active_panel:
                    content_lines.extend([
                        "",
                        f"–≠–ª–µ–º–µ–Ω—Ç {self.active_element[i] + 1} –∏–∑ {total_elements}",
                        "‚Üí –æ—Ç–∫—Ä—ã—Ç—å | ‚Üë‚Üì –Ω–∞–≤–∏–≥–∞—Ü–∏—è"
                    ])

            panel.update("\n".join(content_lines))

    def on_input_submitted(self, event: Input.Submitted) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        user_input = event.value.strip()

        if not user_input:
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if user_input.lower() == "exit":
            self.exit()
            return
        elif user_input.lower() == "clear":
            self.clear_active_panel()
        elif user_input.lower() == "delete":
            self.delete_active_element()
        elif user_input.lower() == "help":
            self.show_help()
        elif user_input.lower() == "reset":
            self.reset_all_panels()
        elif user_input.startswith("edit "):
            new_text = user_input[5:]
            self.edit_active_element(new_text)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            self.add_element_to_active_panel(user_input)

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        event.input.value = ""

    def add_element_to_active_panel(self, text):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.panel_elements[self.active_panel].append(text)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        self.active_element[self.active_panel] = len(self.panel_elements[self.active_panel]) - 1
        self.update_scroll()
        self.update_display()

    def edit_active_element(self, new_text):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        if self.panel_elements[self.active_panel]:
            old_text = self.panel_elements[self.active_panel][self.active_element[self.active_panel]]
            self.panel_elements[self.active_panel][self.active_element[self.active_panel]] = new_text

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ sub_elements –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if old_text in self.sub_elements:
                self.sub_elements[new_text] = self.sub_elements.pop(old_text)

            self.update_display()

    def delete_active_element(self):
        """–£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        if self.panel_elements[self.active_panel]:
            element_text = self.panel_elements[self.active_panel][self.active_element[self.active_panel]]
            del self.panel_elements[self.active_panel][self.active_element[self.active_panel]]

            # –£–¥–∞–ª—è–µ–º –∏–∑ sub_elements –µ—Å–ª–∏ –µ—Å—Ç—å
            if element_text in self.sub_elements:
                del self.sub_elements[element_text]

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if self.active_element[self.active_panel] >= len(self.panel_elements[self.active_panel]):
                self.active_element[self.active_panel] = max(0, len(self.panel_elements[self.active_panel]) - 1)

            self.update_scroll()
            self.update_display()

    def clear_active_panel(self):
        """–û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        self.panel_elements[self.active_panel] = []
        self.active_element[self.active_panel] = 0
        self.scroll_offset[self.active_panel] = 0
        self.update_display()

    def reset_all_panels(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.panel_elements = [
            ["üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üìÅ –ü—Ä–æ–µ–∫—Ç—ã", "üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üìÑ readme.txt", "üìÑ config.json"],
            [],
            []
        ]
        self.active_element = [0, 0, 0]
        self.scroll_offset = [0, 0, 0]
        self.panel_paths = ["–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞", "", ""]
        self.active_panel = 0
        self.update_display()

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        help_elements = [
            "=== –ù–ê–í–ò–ì–ê–¶–ò–Ø ===",
            "‚Ä¢ ‚Üí - –æ—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞",
            "‚Ä¢ ‚Üê - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            "‚Ä¢ ‚Üë/‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º",
            "‚Ä¢ Ctrl+‚Üê/‚Üí - —Å–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–µ–π",
            "",
            "=== –ü–†–û–ö–†–£–¢–ö–ê ===",
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            "‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ‚¨ÜÔ∏è‚¨áÔ∏è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç",
            "  —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
            "",
            "=== –ö–û–ú–ê–ù–î–´ ===",
            "‚Ä¢ —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
            "‚Ä¢ edit —Ç–µ–∫—Å—Ç - –∏–∑–º–µ–Ω–∏—Ç—å",
            "‚Ä¢ delete - —É–¥–∞–ª–∏—Ç—å",
            "‚Ä¢ clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª—å",
            "‚Ä¢ reset - —Å–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—É",
            "‚Ä¢ exit - –≤—ã—Ö–æ–¥"
        ]

        self.panel_elements[self.active_panel] = help_elements
        self.active_element[self.active_panel] = 0
        self.scroll_offset[self.active_panel] = 0
        self.update_display()

    def on_mount(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        input_widget = self.query_one("#command-input", Input)
        input_widget.focus()
        self.update_display()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π")
    print("=" * 60)
    print("–ù–ê–í–ò–ì–ê–¶–ò–Ø:")
    print("‚Ä¢ ‚Üí - –æ—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–Ω–µ–ª–∏")
    print("‚Ä¢ ‚Üê - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å")
    print("‚Ä¢ ‚Üë/‚Üì - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º")
    print("‚Ä¢ Ctrl+‚Üê/‚Üí - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏")
    print()
    print("–ü–†–û–ö–†–£–¢–ö–ê:")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö")
    print("‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º")
    print("‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ‚¨ÜÔ∏è‚¨áÔ∏è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
    print()
    print("–ö–û–ú–ê–ù–î–´:")
    print("‚Ä¢ —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç")
    print("‚Ä¢ edit —Ç–µ–∫—Å—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç")
    print("‚Ä¢ delete - —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç")
    print("‚Ä¢ help - —Å–ø—Ä–∞–≤–∫–∞")
    print("=" * 60)

    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")

    app = ThreePanelApp()
    app.run()


if __name__ == "__main__":
    main()