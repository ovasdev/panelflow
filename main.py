#!/usr/bin/env python3
"""
Console File Manager with Panel System
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–∞–Ω–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import sys
import curses
import stat
import shutil
import mimetypes
import zipfile
import tarfile
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional, Any
import json
import subprocess

from ui_library import PanelManager, PanelState, PanelType


class FileManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.panel_manager = PanelManager(stdscr)
        self.clipboard = []
        self.clipboard_operation = None  # 'copy' or 'cut'
        self.bookmarks = {}
        self.history = []
        self.config = self._load_config()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self._register_command_handlers()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        self._setup_function_keys()

        # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        start_path = os.getcwd()
        self._open_directory(start_path)

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            'show_hidden': False,
            'follow_symlinks': True,
            'confirm_delete': True,
            'editor': os.environ.get('EDITOR', 'nano'),
            'auto_preview': True
        }

        config_path = Path.home() / '.filemanager_config.json'
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    config = json.load(f)
                    default_config.update(config)
            except Exception:
                pass

        return default_config

    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = Path.home() / '.filemanager_config.json'
        try:
            with open(config_path, 'w') as f:
                json.dump(self.config, f, indent=2)
        except Exception:
            pass

    def _register_command_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = {
            'cd': self._cmd_cd,
            'ls': self._cmd_ls,
            'pwd': self._cmd_pwd,
            'find': self._cmd_find,
            'grep': self._cmd_grep,
            'tree': self._cmd_tree,
            'bookmark': self._cmd_bookmark,
            'history': self._cmd_history,
            'close': self._cmd_close,
            'branch': self._cmd_branch,
            'config': self._cmd_config,
            'help': self._cmd_help,
            'quit': self._cmd_quit,
            'exit': self._cmd_quit
        }

        for cmd, handler in handlers.items():
            self.panel_manager.register_command_handler(cmd, handler)

    def _setup_function_keys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""
        current_panel = self.panel_manager.get_current_panel()
        if not current_panel:
            return

        if current_panel.state.panel_type == PanelType.DIRECTORY:
            keys = {
                'F1': 'Help',
                'F2': 'Rename',
                'F3': 'View',
                'F4': 'Edit',
                'F5': 'Copy',
                'F6': 'Move',
                'F7': 'Mkdir',
                'F8': 'Delete',
                'F10': 'Quit'
            }
        elif current_panel.state.panel_type == PanelType.FILE:
            keys = {
                'F1': 'Help',
                'F2': 'Rename',
                'F3': 'Mode',
                'F4': 'Edit',
                'F5': 'Copy',
                'F7': 'Search',
                'F8': 'Close',
                'F10': 'Quit'
            }
        elif current_panel.state.panel_type == PanelType.ARCHIVE:
            keys = {
                'F1': 'Help',
                'F4': 'Extract',
                'F5': 'ExtractAll',
                'F6': 'Add',
                'F8': 'Delete',
                'F10': 'Quit'
            }
        else:
            keys = {'F10': 'Quit'}

        self.panel_manager.function_keys.set_keys(keys)

    def _get_file_icon(self, path: Path, is_dir: bool = False) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞"""
        if is_dir:
            return '[DIR]'

        suffix = path.suffix.lower()

        # –ê—Ä—Ö–∏–≤—ã
        if suffix in ['.zip', '.tar', '.gz', '.bz2', '.xz', '.7z', '.rar']:
            return '[ARC]'
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif suffix in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.ico']:
            return '[IMG]'
        # –ö–æ–¥
        elif suffix in ['.py', '.js', '.html', '.css', '.c', '.cpp', '.java', '.go', '.rs']:
            return '[CODE]'
        # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
        elif os.access(path, os.X_OK) and not is_dir:
            return '[EXE]'
        else:
            return '[FILE]'

    def _format_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size < 1024.0:
                return f"{size:.1f}{unit}"
            size /= 1024.0
        return f"{size:.1f}PB"

    def _format_permissions(self, mode: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        perms = stat.filemode(mode)
        return perms

    def _get_directory_content(self, path: Path) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            items = []
            entries = list(path.iterdir())

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
            entries.sort(key=lambda x: (not x.is_dir(), x.name.lower()))

            for entry in entries:
                # –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
                if entry.name.startswith('.') and not self.config['show_hidden']:
                    continue

                try:
                    stat_info = entry.stat()
                    is_dir = entry.is_dir()

                    icon = self._get_file_icon(entry, is_dir)
                    name = entry.name

                    if is_dir:
                        size_str = "<DIR>"
                    else:
                        size_str = self._format_size(stat_info.st_size)

                    modified = datetime.fromtimestamp(stat_info.st_mtime).strftime('%Y-%m-%d %H:%M')

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    line = f"{icon} {name:<30} {size_str:>10} {modified}"
                    items.append(line)

                except (OSError, PermissionError):
                    # –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    icon = self._get_file_icon(entry, entry.is_dir())
                    line = f"{icon} {entry.name:<30} {'<PERM>':>10} {'':>16}"
                    items.append(line)

            return items

        except PermissionError:
            return ["Permission denied"]
        except Exception as e:
            return [f"Error: {str(e)}"]

    def _get_file_content(self, path: Path) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            stat_info = path.stat()
            if stat_info.st_size > 1024 * 1024:  # 1MB
                return [f"File too large: {self._format_size(stat_info.st_size)}",
                        "Use F4 to edit in external editor"]

            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    if len(lines) > 1000:
                        lines = lines[:1000] + ["... (file truncated)"]
                    return [line.rstrip('\n\r') for line in lines]
            except UnicodeDecodeError:
                # –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º hex –¥–∞–º–ø
                with open(path, 'rb') as f:
                    data = f.read(512)  # –ü–µ—Ä–≤—ã–µ 512 –±–∞–π—Ç
                    lines = []
                    for i in range(0, len(data), 16):
                        chunk = data[i:i + 16]
                        hex_part = ' '.join(f'{b:02x}' for b in chunk)
                        ascii_part = ''.join(chr(b) if 32 <= b < 127 else '.' for b in chunk)
                        lines.append(f"{i:08x}: {hex_part:<48} {ascii_part}")
                    if len(data) == 512:
                        lines.append("... (showing first 512 bytes)")
                    return lines

        except PermissionError:
            return ["Permission denied"]
        except Exception as e:
            return [f"Error reading file: {str(e)}"]

    def _get_archive_content(self, path: Path) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"""
        try:
            items = []

            if path.suffix.lower() == '.zip':
                with zipfile.ZipFile(path, 'r') as zf:
                    for info in zf.infolist():
                        if info.is_dir():
                            icon = 'üìÅ'
                            size_str = "<DIR>"
                        else:
                            icon = 'üìÑ'
                            size_str = self._format_size(info.file_size)

                        modified = datetime(*info.date_time).strftime('%Y-%m-%d %H:%M')
                        line = f"{icon} {info.filename:<40} {size_str:>10} {modified}"
                        items.append(line)

            elif path.suffix.lower() in ['.tar', '.tar.gz', '.tar.bz2', '.tar.xz']:
                with tarfile.open(path, 'r') as tf:
                    for member in tf.getmembers():
                        if member.isdir():
                            icon = 'üìÅ'
                            size_str = "<DIR>"
                        else:
                            icon = 'üìÑ'
                            size_str = self._format_size(member.size)

                        modified = datetime.fromtimestamp(member.mtime).strftime('%Y-%m-%d %H:%M')
                        line = f"{icon} {member.name:<40} {size_str:>10} {modified}"
                        items.append(line)
            else:
                return ["Unsupported archive format"]

            return items

        except Exception as e:
            return [f"Error reading archive: {str(e)}"]

    def _open_directory(self, path: str):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            dir_path = Path(path).resolve()
            if not dir_path.exists():
                return

            if not dir_path.is_dir():
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                self._open_file(dir_path)
                return

            content = self._get_directory_content(dir_path)

            # –ü–æ–¥—Å—á—ë—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            item_count = len([line for line in content if not line.startswith("Error")])

            state = PanelState(
                title=str(dir_path),
                content=content,
                panel_type=PanelType.DIRECTORY,
                metadata={
                    'path': str(dir_path),
                    'items': item_count
                }
            )

            self.panel_manager.add_panel(state)
            self._setup_function_keys()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if str(dir_path) not in self.history:
                self.history.append(str(dir_path))
                if len(self.history) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    self.history.pop(0)

        except Exception as e:
            self._show_error(f"Cannot open directory: {str(e)}")

    def _open_file(self, path: Path):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            if not path.exists() or not path.is_file():
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if path.suffix.lower() in ['.zip', '.tar', '.tar.gz', '.tar.bz2', '.tar.xz']:
                # –ê—Ä—Ö–∏–≤
                content = self._get_archive_content(path)
                panel_type = PanelType.ARCHIVE
                title = f"üì¶ {path.name}"
            else:
                # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
                content = self._get_file_content(path)
                panel_type = PanelType.FILE
                title = f"üìÑ {path.name}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            stat_info = path.stat()
            file_size = self._format_size(stat_info.st_size)

            state = PanelState(
                title=title,
                content=content,
                panel_type=panel_type,
                metadata={
                    'path': str(path),
                    'size': file_size,
                    'lines': len(content) if panel_type == PanelType.FILE else None
                }
            )

            self.panel_manager.add_panel(state)
            self._setup_function_keys()

        except Exception as e:
            self._show_error(f"Cannot open file: {str(e)}")

    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        pass

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    def _cmd_cd(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not args:
            path = str(Path.home())
        else:
            path = ' '.join(args)

        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        current_panel = self.panel_manager.get_current_panel()
        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            current_path = Path(current_panel.state.metadata['path'])
            if not os.path.isabs(path):
                path = str(current_path / path)

        self._open_directory(path)

    def _cmd_ls(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            path = current_panel.state.metadata['path']
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏
            current_panel.state.content = self._get_directory_content(Path(path))

    def _cmd_pwd(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel:
            path = current_panel.state.metadata.get('path', 'Unknown')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            self.panel_manager.command_line.text = path

    def _cmd_find(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        if not args:
            return

        pattern = args[0]
        current_panel = self.panel_manager.get_current_panel()

        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            search_path = Path(current_panel.state.metadata['path'])

            try:
                results = []
                for root, dirs, files in os.walk(search_path):
                    # –ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
                    for file in files:
                        if pattern.lower() in file.lower():
                            full_path = Path(root) / file
                            relative_path = full_path.relative_to(search_path)
                            results.append(f"üìÑ {relative_path}")

                    # –ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    for dir_name in dirs:
                        if pattern.lower() in dir_name.lower():
                            full_path = Path(root) / dir_name
                            relative_path = full_path.relative_to(search_path)
                            results.append(f"üìÅ {relative_path}")

                if results:
                    state = PanelState(
                        title=f"Search: {pattern}",
                        content=results,
                        panel_type=PanelType.DIRECTORY,
                        metadata={'search_results': True}
                    )
                    self.panel_manager.add_panel(state)
                else:
                    results = [f"No files found matching '{pattern}'"]
                    state = PanelState(
                        title=f"Search: {pattern}",
                        content=results,
                        panel_type=PanelType.FILE
                    )
                    self.panel_manager.add_panel(state)

            except Exception as e:
                self._show_error(f"Search error: {str(e)}")

    def _cmd_grep(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–æ–≤"""
        if not args:
            return

        pattern = args[0]
        current_panel = self.panel_manager.get_current_panel()

        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            search_path = Path(current_panel.state.metadata['path'])

            try:
                results = []
                for root, dirs, files in os.walk(search_path):
                    for file in files:
                        file_path = Path(root) / file
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                for line_num, line in enumerate(f, 1):
                                    if pattern.lower() in line.lower():
                                        relative_path = file_path.relative_to(search_path)
                                        results.append(f"{relative_path}:{line_num}: {line.strip()}")

                        except (UnicodeDecodeError, PermissionError, OSError):
                            continue

                if results:
                    state = PanelState(
                        title=f"Grep: {pattern}",
                        content=results,
                        panel_type=PanelType.FILE
                    )
                    self.panel_manager.add_panel(state)
                else:
                    results = [f"Pattern '{pattern}' not found"]
                    state = PanelState(
                        title=f"Grep: {pattern}",
                        content=results,
                        panel_type=PanelType.FILE
                    )
                    self.panel_manager.add_panel(state)

            except Exception as e:
                self._show_error(f"Grep error: {str(e)}")

    def _cmd_tree(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            path = Path(current_panel.state.metadata['path'])

            def build_tree(dir_path: Path, prefix: str = "", max_depth: int = 3, current_depth: int = 0):
                if current_depth >= max_depth:
                    return []

                items = []
                try:
                    entries = sorted(dir_path.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))

                    for i, entry in enumerate(entries):
                        if entry.name.startswith('.') and not self.config['show_hidden']:
                            continue

                        is_last = i == len(entries) - 1
                        current_prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
                        next_prefix = "    " if is_last else "‚îÇ   "

                        icon = self._get_file_icon(entry, entry.is_dir())
                        items.append(f"{prefix}{current_prefix}{icon} {entry.name}")

                        if entry.is_dir():
                            items.extend(build_tree(entry, prefix + next_prefix, max_depth, current_depth + 1))

                except PermissionError:
                    items.append(f"{prefix}‚îî‚îÄ‚îÄ [Permission Denied]")

                return items

            tree_content = [f"üìÅ {path.name}"] + build_tree(path)

            state = PanelState(
                title=f"Tree: {path.name}",
                content=tree_content,
                panel_type=PanelType.FILE
            )
            self.panel_manager.add_panel(state)

    def _cmd_bookmark(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∞–º–∏"""
        if not args:
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏
            if self.bookmarks:
                content = [f"{name}: {path}" for name, path in self.bookmarks.items()]
            else:
                content = ["No bookmarks saved"]

            state = PanelState(
                title="Bookmarks",
                content=content,
                panel_type=PanelType.FILE
            )
            self.panel_manager.add_panel(state)
            return

        action = args[0]
        if action == "add" and len(args) > 1:
            name = args[1]
            current_panel = self.panel_manager.get_current_panel()
            if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
                self.bookmarks[name] = current_panel.state.metadata['path']

        elif action == "go" and len(args) > 1:
            name = args[1]
            if name in self.bookmarks:
                self._open_directory(self.bookmarks[name])

        elif action == "remove" and len(args) > 1:
            name = args[1]
            if name in self.bookmarks:
                del self.bookmarks[name]

    def _cmd_history(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        if self.history:
            content = [f"{i + 1}: {path}" for i, path in enumerate(self.history[-20:])]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20
        else:
            content = ["No history available"]

        state = PanelState(
            title="History",
            content=content,
            panel_type=PanelType.FILE
        )
        self.panel_manager.add_panel(state)

    def _cmd_close(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏"""
        self.panel_manager.remove_panel()
        self._setup_function_keys()

    def _cmd_branch(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∞–º–∏"""
        if not args:
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏
            if self.panel_manager.branches:
                content = [f"{name}: {len(states)} panels" for name, states in self.panel_manager.branches.items()]
            else:
                content = ["No branches saved"]

            state = PanelState(
                title="Branches",
                content=content,
                panel_type=PanelType.FILE
            )
            self.panel_manager.add_panel(state)
            return

        action = args[0]
        if action == "save" and len(args) > 1:
            name = args[1]
            self.panel_manager.save_branch(name)
        elif action == "load" and len(args) > 1:
            name = args[1]
            self.panel_manager.load_branch(name)
            self._setup_function_keys()

    def _cmd_config(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not args:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            content = [f"{key}: {value}" for key, value in self.config.items()]
            state = PanelState(
                title="Configuration",
                content=content,
                panel_type=PanelType.FILE
            )
            self.panel_manager.add_panel(state)
            return

        if len(args) >= 2:
            key, value = args[0], args[1]
            if key in self.config:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(self.config[key], bool):
                    value = value.lower() in ['true', '1', 'yes', 'on']
                elif isinstance(self.config[key], int):
                    try:
                        value = int(value)
                    except ValueError:
                        return

                self.config[key] = value
                self._save_config()

    def _cmd_help(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        help_content = [
            "File Manager Commands:",
            "",
            "Navigation:",
            "  cd <path>        - Change directory",
            "  ls               - Refresh current directory",
            "  pwd              - Show current path",
            "",
            "Search:",
            "  find <pattern>   - Find files by name",
            "  grep <pattern>   - Search in file contents",
            "  tree             - Show directory tree",
            "",
            "Bookmarks:",
            "  bookmark         - Show all bookmarks",
            "  bookmark add <name> - Add current dir to bookmarks",
            "  bookmark go <name>  - Go to bookmark",
            "",
            "Panels:",
            "  close            - Close current panel",
            "  branch save <name> - Save current panel layout",
            "  branch load <name> - Load saved layout",
            "",
            "Keys:",
            "  Tab              - Switch between panels",
            "  Escape           - Close panel",
            "  Enter            - Open selected item",
            "  Arrow Keys       - Navigate",
            "  F1-F10           - Function keys (context dependent)",
            "",
            "Configuration:",
            "  config           - Show settings",
            "  config <key> <value> - Change setting"
        ]

        state = PanelState(
            title="Help",
            content=help_content,
            panel_type=PanelType.FILE
        )
        self.panel_manager.add_panel(state)

    def _cmd_quit(self, args: List[str]):
        """–ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞"""
        self._save_config()
        sys.exit(0)

    def handle_function_key(self, key: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à"""
        current_panel = self.panel_manager.get_current_panel()
        if not current_panel:
            return

        # F1 - Help
        if key == curses.KEY_F1:
            self._cmd_help([])

        # F2 - Rename
        elif key == curses.KEY_F2:
            self._handle_rename()

        # F3 - View/Mode
        elif key == curses.KEY_F3:
            self._handle_view()

        # F4 - Edit/Extract
        elif key == curses.KEY_F4:
            self._handle_edit()

        # F5 - Copy/Extract All
        elif key == curses.KEY_F5:
            self._handle_copy()

        # F6 - Move/Add to Archive
        elif key == curses.KEY_F6:
            self._handle_move()

        # F7 - Mkdir/Search
        elif key == curses.KEY_F7:
            self._handle_mkdir_or_search()

        # F8 - Delete/Close
        elif key == curses.KEY_F8:
            self._handle_delete()

        # F10 - Quit
        elif key == curses.KEY_F10:
            self._cmd_quit([])

    def _handle_rename(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.panel_manager.command_line.text = "rename "

    def _handle_view(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            selected = current_panel.get_selected_item()
            if selected:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                parts = selected.split()
                if len(parts) >= 2:
                    filename = parts[1]
                    current_path = Path(current_panel.state.metadata['path'])
                    file_path = current_path / filename
                    if file_path.exists():
                        self._open_file(file_path)

    def _handle_edit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel:
            if current_panel.state.panel_type == PanelType.DIRECTORY:
                selected = current_panel.get_selected_item()
                if selected:
                    parts = selected.split()
                    if len(parts) >= 2:
                        filename = parts[1]
                        current_path = Path(current_panel.state.metadata['path'])
                        file_path = current_path / filename
                        if file_path.exists() and file_path.is_file():
                            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
                            try:
                                subprocess.run([self.config['editor'], str(file_path)])
                            except Exception:
                                pass

    def _handle_copy(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        self.panel_manager.command_line.text = "copy "

    def _handle_move(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        self.panel_manager.command_line.text = "move "

    def _handle_mkdir_or_search(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel:
            if current_panel.state.panel_type == PanelType.DIRECTORY:
                self.panel_manager.command_line.text = "mkdir "
            elif current_panel.state.panel_type == PanelType.FILE:
                self.panel_manager.command_line.text = "grep "

    def _handle_delete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        current_panel = self.panel_manager.get_current_panel()
        if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
            self.panel_manager.command_line.text = "delete "
        else:
            # –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
            self._cmd_close([])

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
            self.panel_manager.draw()

            while True:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
                key = self.stdscr.getch()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                command = self.panel_manager.handle_key(key)
                if command:
                    self.panel_manager.execute_command(command)
                    self._setup_function_keys()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
                if curses.KEY_F1 <= key <= curses.KEY_F12:
                    self.handle_function_key(key)
                    self._setup_function_keys()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
                elif key == ord('\n') or key == ord('\r'):
                    current_panel = self.panel_manager.get_current_panel()
                    if current_panel and current_panel.state.panel_type == PanelType.DIRECTORY:
                        selected = current_panel.get_selected_item()
                        if selected and not selected.startswith("Error") and not selected.startswith("Permission"):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                            parts = selected.split()
                            if len(parts) >= 2:
                                filename = parts[1]
                                current_path = Path(current_panel.state.metadata['path'])
                                item_path = current_path / filename

                                if item_path.exists():
                                    if item_path.is_dir():
                                        self._open_directory(str(item_path))
                                    else:
                                        self._open_file(item_path)
                                    self._setup_function_keys()

                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                self.panel_manager.draw()

        except KeyboardInterrupt:
            self._cmd_quit([])


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    def run_file_manager(stdscr):
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ curses
            curses.curs_set(1)  # –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å–æ—Ä
            stdscr.nodelay(False)
            stdscr.timeout(-1)
            stdscr.keypad(True)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à

            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            stdscr.clear()
            stdscr.refresh()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            stdscr.addstr(0, 0, "Initializing File Manager...")
            stdscr.refresh()

            # –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            fm = FileManager(stdscr)
            fm.run()

        except Exception as e:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—à–∏–±–∫–∏
            curses.endwin()
            print(f"Error during execution: {e}")
            import traceback
            traceback.print_exc()

    try:
        curses.wrapper(run_file_manager)
    except Exception as e:
        print(f"Error initializing curses: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()