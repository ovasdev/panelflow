# minimal_test.py
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""

import tempfile
import json
from pathlib import Path
from typing import Any

from panelflow.core import Application
from panelflow.core.handlers import BasePanelHandler
from panelflow.core.events import WidgetSubmittedEvent, StateChangedEvent, ErrorOccurredEvent


class MinimalHandler(BasePanelHandler):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π."""

    def on_widget_update(self, widget_id: str, value: Any) -> tuple | None:
        print(f"\nüéØ === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ó–í–ê–ù ===")
        print(f"widget_id: '{widget_id}'")
        print(f"value: {value}")
        print(f"context: {self.context}")
        print(f"form_data: {self.form_data}")

        if widget_id == "test_button":
            result = ("navigate_down", "second")
            print(f"üöÄ –í–æ–∑–≤—Ä–∞—â–∞—é –∫–æ–º–∞–Ω–¥—É: {result}")
            return result
        else:
            print(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é None")
            return None


def create_minimal_config():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –≤—Å–µ–≥–æ 2 –ø–∞–Ω–µ–ª–∏."""
    return {
        "entryPanel": "first",
        "panels": [
            {
                "id": "first",
                "title": "–ü–µ—Ä–≤–∞—è –ø–∞–Ω–µ–ª—å",
                "handler_class_name": "MinimalHandler",
                "widgets": [
                    {
                        "id": "test_button",
                        "type": "button",
                        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞"
                    }
                ]
            },
            {
                "id": "second",
                "title": "–í—Ç–æ—Ä–∞—è –ø–∞–Ω–µ–ª—å",
                "widgets": [
                    {
                        "id": "second_button",
                        "type": "button",
                        "title": "–ö–Ω–æ–ø–∫–∞ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏"
                    }
                ]
            }
        ]
    }


def test_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞."""

    print("üî¨ === –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===\n")

    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("üìÅ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    config = create_minimal_config()
    handler_map = {"MinimalHandler": MinimalHandler}

    temp_file = tempfile.NamedTemporaryFile(
        mode='w', suffix='.json', delete=False, encoding='utf-8'
    )
    json.dump(config, temp_file, ensure_ascii=False, indent=2)
    temp_file.close()

    try:
        app = Application(temp_file.name, handler_map)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return
    finally:
        Path(temp_file.name).unlink()

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print(f"\nüè† –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print(f"   –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: {app.tree_root.panel_template.id}")
    print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: {app.active_node.panel_template.id}")
    print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {app.active_node.is_active}")
    print(f"   –î–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–µ–∫–∏: {app.active_node.children_stacks}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–Ω–µ–ª–∏: {list(app._panel_templates.keys())}")

    if app.active_node.panel_template.id != "first":
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å!")
        return
    print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–∞
    print(f"\nüîç –®–∞–≥ 3: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–∞")
    found_node = app._find_node_by_widget_id("test_button")
    if found_node:
        print(f"‚úÖ –í–∏–¥–∂–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏: {found_node.panel_template.id}")
    else:
        print(f"‚ùå –í–∏–¥–∂–µ—Ç 'test_button' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    print(f"\nüéØ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    if "second" in app._panel_templates:
        second_panel = app._panel_templates["second"]
        print(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: '{second_panel.title}'")
    else:
        print(f"‚ùå –ü–∞–Ω–µ–ª—å 'second' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –®–∞–≥ 5: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    print(f"\nüì° –®–∞–≥ 5: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è")
    events = []

    def event_callback(event):
        events.append(event)
        print(f"   üì¢ –°–æ–±—ã—Ç–∏–µ: {type(event).__name__}")
        if isinstance(event, ErrorOccurredEvent):
            print(f"      ‚ùå –û–®–ò–ë–ö–ê: {event.title}")
            print(f"      üìù {event.message}")

    app.subscribe_to_events(event_callback)
    print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")

    # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    print(f"\nüöÄ –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print(f"   –û—Ç–ø—Ä–∞–≤–ª—è—é: WidgetSubmittedEvent('test_button', True)")

    events.clear()
    app.post_event(WidgetSubmittedEvent(widget_id="test_button", value=True))

    # –®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"\nüìä –®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    print(f"   –°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–æ: {len(events)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: {app.active_node.panel_template.id}")

    if events:
        for i, event in enumerate(events):
            print(f"   –°–æ–±—ã—Ç–∏–µ {i + 1}: {type(event).__name__}")
            if isinstance(event, ErrorOccurredEvent):
                print(f"      ‚ùå {event.title}: {event.message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if app.active_node.panel_template.id == "second":
        print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if app.active_node.parent:
            print(f"   ‚úÖ –†–æ–¥–∏—Ç–µ–ª—å: {app.active_node.parent.panel_template.id}")
            if "test_button" in app.active_node.parent.children_stacks:
                print(f"   ‚úÖ –°—Ç–µ–∫ —Å–æ–∑–¥–∞–Ω: test_button")
                stack = app.active_node.parent.children_stacks["test_button"]
                print(f"   ‚úÖ –í —Å—Ç–µ–∫–µ: {[node.panel_template.id for node in stack]}")
            else:
                print(f"   ‚ùå –°—Ç–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω!")
        else:
            print(f"   ‚ùå –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è!")

    else:
        print(f"\n‚ùå –ü–†–û–í–ê–õ! –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
        print(f"   –û–∂–∏–¥–∞–ª–∏: 'second'")
        print(f"   –ü–æ–ª—É—á–∏–ª–∏: '{app.active_node.panel_template.id}'")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print(f"\nüîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º form_data (–¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–±—ã—Ç–∏–∏)
        print(f"   1. Form data –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏: {app.active_node.form_data}")
        if "test_button" in app.active_node.form_data:
            print(f"      ‚úÖ –í–∏–¥–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω (_handle_widget_submission —Å—Ä–∞–±–æ—Ç–∞–ª)")
        else:
            print(f"      ‚ùå –í–∏–¥–∂–µ—Ç –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω (_handle_widget_submission –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        print(f"   2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ handler_map: {'MinimalHandler' in app.handler_map}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        print(f"   3. –ú–µ—Ç–æ–¥ _handle_widget_submission: {hasattr(app, '_handle_widget_submission')}")
        print(f"   4. –ú–µ—Ç–æ–¥ _execute_navigation_down: {hasattr(app, '_execute_navigation_down')}")
        print(f"   5. –ú–µ—Ç–æ–¥ post_event: {hasattr(app, 'post_event')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
        print(f"   6. –î–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–µ–∫–∏ –∫–æ—Ä–Ω—è: {app.tree_root.children_stacks}")

        return False

    return True


if __name__ == "__main__":
    success = test_step_by_step()

    if success:
        print(f"\nüöÄ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∞–º.")
    else:
        print(f"\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ.")
        print(f"\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print(f"   1. –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω _handle_widget_submission")
        print(f"   2. –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω _execute_navigation_down")
        print(f"   3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        print(f"   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–±—ã—Ç–∏–π")